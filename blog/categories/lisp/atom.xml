<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2016-08-11T14:07:18-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Weekend project: affiliate.el]]></title>
    <link href="http://stronglyemergent.com//blog/2013/weekend-project-affiliate-dot-el/"/>
    <updated>2013-03-21T20:16:00-07:00</updated>
    <id>http://stronglyemergent.com//blog/2013/weekend-project-affiliate-dot-el</id>
    <content type="html"><![CDATA[<p>Since I’m searching for a new job (<a href="http://careers.stackoverflow.com/stronglyemergent">check out my CV on Stack Overflow Careers!</a>),
I’ve been trying to gin up little personal projects and to extract what publishable code I can from my work projects.
The first result of this is <a href="https://github.com/brighid/affiliate.el">affiliate.el</a>.
It’s a small project - very small - but it has virtues that I think make it a good component of a GitHub portfolio.</p>

<p>First, the smallness is advantage: it is a project with a <em>small, well-defined scope</em>.
That’s important.
Projects with a large scope are prone to taking a long time, and projects with a poorly-defined scope are almost by definition a bad idea
(making a note that fail-fast rapid-iteration work is a totally reasonable thing).
The scope of this project
is “automatically turn Amazon/iTunes URLs in text into affiliate links by extending emacs.”
I chose that because I do the great majority of my writing (including this post) in emacs,
and because I am involved in Amazon and Apple’s affiliate-links programs (because I like extra coffee money once in a while just
as well as the next person).
Choosing scope carefully is important for projects that are intended to accomplish a goal
(as opposed to projects where the point is to learn about the problem space, such as the Clojure thing I’m messing with)—
and in professional life, the norm is for projects to be goal-focused.</p>

<p>The other reason that smallness is an advantage is that <code>affiliate.el</code> is small enough for someone else to sit down, read, and fully understand in one sitting.
I want to make it easy for this hypothetical code reviewer to get a grasp on what I’ve created.
To that end, this project also demonstrates
“behold, I write friendly code: there are clear docstrings, there is an approachable readme, and the commit messages are concise and helpful.”
I think that this is an important skill for an engineer to have too, because coding work happens in a social context.
Your ability to explain your work to other engineers—
and to others in general—is crucial to its value being recognized.
So I want to show with this project “I can make my code accessible to others.”</p>

<p>Of course, those virtues only really shine in the context of good solid working code.
This too I think the project demonstrates: concise, workmanlike, idiomatic elisp with a suite of unit tests.
This code is well-formed for its environment:
it uses built-in emacs features such as <code>customize</code> and <code>provide</code> like a good citizen of its ecosystem,
it doesn’t re-invent any wheels or require any esoteric libraries,
and it uses unit tests to demonstrate and hew to the requirements for input and output.
It is not heroic code, it’s just solid, humble, functional code.</p>

<p>There probably aren’t very many people to whom this little emacs module is useful as executable code,
but I’m fine with that as long as it’s useful for saying something about its creator.
Especially if that thing is <a href="http://careers.stackoverflow.com/stronglyemergent">“hire this person.”</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Program Or Paradigm?]]></title>
    <link href="http://stronglyemergent.com//blog/2013/program-or-paradigm/"/>
    <updated>2013-03-03T17:08:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/program-or-paradigm</id>
    <content type="html"><![CDATA[<p>I’m an emacs girl:
emacs is the environment that taught me to love Lisp, emacs is most of the way to becoming an extension of my desires, emacs is in Neal Stephenson’s memorable phrase
“the thermonuclear text editor.”
Like everyone else who’s smitten with it, I have a theory about What Makes Emacs Different: emacs is a paradigm, not a program.</p>

<p>Let’s talk about interfaces.
In 1976, using computers was harder—
not because people were dumber or worse at design, but because there were fewer giants on whose shoulders to stand and because the computers themselves were incapable of working as hard.
That meant, in turn, that the 1976 OS couldn’t be as generous to user-space programs as the 2013 OS can be.
In 2013, the OS can step up and be the primary answerer of the question, “how do I use this computer?”
In 1976, the OS is too busy running the computer to do more than nod in the Bourne shell’s direction.
This has considerable downsides for programs: they have to do everything themselves.
But they have one important freedom:
they get to answer the user’s fundamental “how do I use this computer?” question <em>any way they want.</em></p>

<p>In 2013, the OS has an answer to this question, more or less opinionated according to the OS.
Because it is easier to let the OS answer the question, that’s what most programs do:
they use the OS’s chrome, file management, and other facilities.
There are many good things about this: there are many more useful programs in the world than when programs had to do everything themselves.
But it is a tradeoff:
a program that comes from the world where the OS provides easy answers is almost completely unable to provide its own answers.</p>

<p>This is where we come back to emacs:
the reason that emacs can look so strange in 2013 is that it has its own opinions, strong ones, about how to relate to files, displays, and text.
Emacs is a <em>paradigm for how to interact with text.</em>
It has stronger opinions than modern programs because it comes from a time when programs had the ability to answer those questions themselves.
A program from the strong-OS era—
for example, Eclipse—
or which adapted itself to strong OSes—
for example, Microsoft Word—
is restricted by being situated within the boundaries established the by the OS’ answer to “how do I use this computer?”
Eclipse and Word are <em>programs</em> that edit text.
Emacs is a <em>language</em> for editing text.</p>

<p>One of the clearest ways to see this is to compare emacs to something that’s more similar to it than Eclipse or Word: <code>vi</code>.
With its movement-operation-modifier syntax for commands, vi has its own answer to the question
“how do I use this computer?”
that’s every bit as thorny for us 2013 folks as emacs’ answer—
and that’s <a href="http://stackoverflow.com/a/1220118/">just as powerful when you grok it deeply</a>.
In the context of their 1976 roots, you can see that the creators of both vi and emacs embarked on the tremendously ambitious project of giving users a language in which to edit text.
The existence and popularity of software that’s pushing 40 years old and still being actively used and extended, is strong evidence that both did well
(though we should check our <a href="http://en.wikipedia.org/wiki/Survivorship_bias">survivorship bias</a> and note that most programs from that era did not survive in the same way).</p>

<p>If you are someone who spends a lot of time with text, especially if you’re a hacker, you should be using emacs or vi.
There are many <a href="http://notepad-plus-plus.org/">okay</a> and <a href="http://www.sublimetext.com/">good</a> <a href="http://www.barebones.com/products/bbedit/">tools</a> for <a href="http://www.chocolatapp.com/">editing</a> <a href="http://macromates.com/">text</a> and <a href="http://panic.com/coda/">producing</a> <a href="http://www.jetbrains.com/idea/">code</a>, especially for <a href="https://developer.apple.com/xcode/">specific</a> <a href="http://www.microsoft.com/visualstudio/eng">domains</a>, but emacs and vi are the only <em>great</em> general-purpose editors.
A program that wants to take advantage of the benefits that a modern OS offers could possibly be great—
but it would have to be a <a href="http://www.lighttable.com/">different route</a> to greatness than emacs and vi took.</p>

<p>I spend a tremendous amount of time with prose and code, and emacs is a great match for me.
For a large class of problems, my response to encountering them starts with <code>M-:</code>.
I routinely try to use emacs’ keyboard shortcuts in other contexts (e.g.
switching tabs in Firefox with <code>C-x o</code>).
I was actively excited when I found out that emacs had integrated a unit testing framework.
When I tell you that you should use emacs, you should know that that’s the kind of relationship I have with emacs.
I think you should use emacs anyhow, because I think that when a task is important to you, you should use a great tool for it, not just the first good one you find.
“How will I use this computer to produce prose and code for the next 20 years?”
is a very, <em>very</em> important question to me.</p>

<p>The answer is emacs.</p>
]]></content>
  </entry>
  
</feed>
