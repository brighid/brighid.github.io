<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: adobe | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/adobe/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2017-10-31T10:50:08-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Textbook Overview 2]]></title>
    <link href="http://stronglyemergent.com//blog/2010/textbook-overview-2/"/>
    <updated>2010-02-08T06:01:54+00:00</updated>
    <id>http://stronglyemergent.com//blog/2010/textbook-overview-2</id>
    <content type="html"><![CDATA[<p>I have a problem with textbooks anyhow.
In a classroom environment, you are presented with a body of knowledge that you need to absorb.
There are two primary things you need: knowledge and narrative.
Textbooks, in a noble but doomed effort, usually try to present both.
However, we know enough now about different learning styles that it&rsquo;s easy to see how costly it is to try and stick just one narrative onto a body of information.
Additionally, in a technical subject, it&rsquo;s hard to strike a balance between comprehensiveness and relevance.</p>

<p>Consider one of my current classes: Managing And Maintaining A Microsoft Windows Server 2003 Environment.
The <a href="http://en.wikipedia.org/wiki/Pareto_principle">80-20 rule</a> is in full effect here: 80% of the users will only need about 20% of Server 2003&rsquo;s features.
The problem is that they&rsquo;ll all need different 20% slices.
A physical textbook, limited by space constraints, will contain a lot of material that&rsquo;s irrelevant to a given sysadmin-in-training - and they won&rsquo;t be able to tell what&rsquo;s relevant and what&rsquo;s not for quite some time.
That&rsquo;s a problem.
There isn&rsquo;t a single narrative that suits a datacenter worker, a helpdesk worker, and a small business' Designated IT Person.
So it&rsquo;s unreasonable to ask a textbook writer to anticipate all that and organize information to somehow fit all of them.</p>

<p>My preferred solution is to use reference works instead of textbooks.
Have a human supplying the narrative: <em>that&rsquo;s what humans are good at!</em>
Don&rsquo;t make textbook writers strive to do the impossible.
Self-teaching textbooks can feel free to attempt it, but for a classroom environment, let humans do what humans are good at and let book/digital encoded information do what it&rsquo;s good at.
This won&rsquo;t happen at my school, though, for reasons that are neither satisfying to me nor productive to elaborate on.</p>

<p>The textbooks that I&rsquo;m currently using are good examples of this.
I have two textbooks that are in the Teach Yourself Whatever mold.
The better one is the Adobe Classroom in a Book: Photoshop one, and the one about the Win9x/NT/XP command-line environment is crappish.
Part of this is their suitability to my needs.
I like Photoshop - it&rsquo;s still basically the best at what it does - and I&rsquo;m enthused about finding out new tricks with it even when the book is tediously plodding through basic techniques that I already know.
That contrasts with the command-line book.
Despite that I&rsquo;m learning some new tricks, the DOS command line, even with NT updates, feels like dealing with a Faulknerian idiot man-child after working with bash and PowerShell.
I know that there are a lot of scriptable utilities that make Windows Server much more manageable, but those are not attracting my attention right now.
What attracts my attention is how painful the DOS shell is to work with.
I need more practice at it because it&rsquo;s essential to managing a Windows Server environment well, but it&rsquo;s one of those things that aggravates me because it feels like it&rsquo;s actively sucking time away from useful things.
I want to enter the job market with minimal legacy skills, so my patience for Win9x/DOS lore presented as utility instead of history is pretty low.</p>

<p>On the positive side, I can view this as an opportunity for me: creating useful narratives is one of My Things, so I should put that skill into practice by taking reference works in my own time and building narrative around them.
Which is how I&rsquo;m trying to learn programming/development skills.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adobe Flash Is Circling The Drain]]></title>
    <link href="http://stronglyemergent.com//blog/2010/adobe-flash-is-circling-the-drain/"/>
    <updated>2010-01-06T06:01:48+00:00</updated>
    <id>http://stronglyemergent.com//blog/2010/adobe-flash-is-circling-the-drain</id>
    <content type="html"><![CDATA[<p>I am writing while angry.
One of my current classes is in Flash.
As a result, I&rsquo;m installing <a href="http://www.adobe.com/products/flash/">Flash CS3</a> at home so that I can experiment with it outside of the school&rsquo;s labs and so that I can work on Flash assignments at my own pace.</p>

<p>Flash&rsquo;s installer is terrible.</p>

<p>Among the first things that it does is to boldly fall face-first into the pavement of prerequisites.
It tells me that it&rsquo;s installing some browser widgets and that I must quit Firefox.
This is shoddy design.
I accept, happily, that in the course of installing Flash, I must install some Flash-viewing software for my browser.
However, you don&rsquo;t get to restart my browser.
Firefox already has a mildly elegant mechanism for installing extensions to its functionality.
It installs them and then tells me &ldquo;okay, restart the browser when you want to use this.&rdquo;  It does things on my schedule.
Not using that mechanism, when it exists, is poor workmanship.
As it happened, I was at a low ebb of Firefox usage at the time.
Normally I have 50 tabs open spread across multiple windows, making <a href="https://addons.mozilla.org/en-US/firefox/addon/4199">restarting the browser</a> a bit time-consuming.</p>

<p>I put my attention elsewhere and kept working with the installer running in the background.
Then I rebooted.
Excuse me, that was the wrong pronoun.
<em>It</em> rebooted.
This splits into two problems.
One is that Windows programs very often demand a system reboot unjustifiably.
I have to suppose that that&rsquo;s related to problems with Windows itself.
The other is that Flash CS3 in particular rebooted without giving me a choice in the matter.
Either the installer stole focus and it heard the right keystrokes for &ldquo;go ahead and reboot&rdquo; in the middle of the command I was typing, or it just rebooted without giving me a confirmation dialogue box.
The first is extremely bad, and the second is demonstrate-the-power-of-this-fully-armed-and-operational-battlestation bad.
I&rsquo;m not going to bother spending time on why the second one is bad - if you don&rsquo;t get that it&rsquo;s bad to do that and why, I forbid you to become involved in any way in creating software.
If you meet the person responsible for this feature of the Flash installer in an alcohol-serving setting, throw a drink in their face.</p>

<p>Stealing focus is one of the classic user experience sins.
It is pure hubris.
It says &ldquo;this application exists for <em>our</em> needs, not for our users' needs.&rdquo;  That is pride, and that is a great reason for your users to take their business somewhere else.
If your product doesn&rsquo;t exist for your customers' needs, why should they (we) care about it?  Back on stealing focus: even though Mac OS X&rsquo;s bouncing Dock icons can get obnoxious, they&rsquo;re at least an intuitive way of communicating &ldquo;hey, this application needs your attention!&rdquo;  Windows has flashing taskbar entries and system-tray notifications (which are usually used badly, but that&rsquo;s no reason not to use them).
Your application shouldn&rsquo;t steal focus from what the user is actually doing for anything short of &ldquo;your computer will physically explode unless you click a button in the next 30 seconds.&rdquo;</p>

<p>I learned this from <a href="http://www.webpagesthatsuck.com/biggest-mistakes-in-web-design-1995-2015.html#1">Vincent Flanders</a>, myself.
It is a pole star of design.
You design <strong>for your users</strong>, not for yourself or for your organization.
Even if you are a rock star like <a href="http://www.apple.com/pr/bios/jobs.html">The Steve</a>, you design for users.
Even if your application is (like Adobe&rsquo;s Flash creation tools) targeted at developers, those are your users, and you design for them.
The targeting of developers actually makes Flash&rsquo;s terrible installer even more problematic.
If the profit center for Flash were content consumers, it&rsquo;d be at least vaguely justifiable for the content creation software to have problems.
But instead, Flash makes money by selling content creation software.
It is free to content consumers.
You&rsquo;d suppose that Adobe would like to make the content creators happy, then, since they&rsquo;re the ones that are actually giving Adobe money.</p>

<p>Instead, Flash is dying.
I can&rsquo;t bring myself to be sad about that, even putting aside the problems I just had with installing Flash.
Flash is great for embedding video.
That&rsquo;s it.
I can&rsquo;t think of anything else Flash does that can&rsquo;t be imitated with a combination of CSS and JavaScript, with better SEO, better accessibility, and cheaper content-creation tools.
Now we&rsquo;ve got HTML5, a standard getting ever closer, and it includes video and audio embedding that don&rsquo;t need Flash, nor do they open the user up to <a href="http://www.google.com/search?q=flash+zero+day+exploit">Flash&rsquo;s numerous security problems</a>.</p>

<p>This is all moderately predictable, too.
Despite the existence of Silverlight (too little, too late), Flash was essentially a monopoly for a while.
Predicting that monopolies will deliver shitty products is pretty easy.
It&rsquo;s what monopolies do, and it&rsquo;s part of why HTML5 is a better solution than Silverlight.
Silverlight would have made things into a competition between Adobe and Microsoft, which is better than a monopoly, but not as good as the HTML5 solution, which doesn&rsquo;t require installing additional software and lets people concentrate on more interesting problems than embedding video.
Silverlight is just more of <a href="http://www.useit.com/alertbox/20001029.html">Flash&rsquo;s problems</a>: not searchable, poor accessibility, security issues.
<a href="http://daringfireball.net/2009/12/html5_video_unusable">HTML5 has its own problems</a>, but they&rsquo;re vendor-independent.</p>

<p>I will take this class, I will attain baseline competency in Flash, and I will keep Flash the hell out of any web site I author.
It is a product whose time is up.</p>
]]></content>
  </entry>
  
</feed>
