<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/python/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2017-10-30T21:31:39-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to make SQLAlchemy pass connection flags to a SQLite database via file:// URI query parameters]]></title>
    <link href="http://stronglyemergent.com//blog/2016/how-to-make-sqlalchemy-pass-connection-flags-to-sqlite/"/>
    <updated>2016-08-10T15:53:00-07:00</updated>
    <id>http://stronglyemergent.com//blog/2016/how-to-make-sqlalchemy-pass-connection-flags-to-sqlite</id>
    <content type="html"><![CDATA[<p>(<em>for just the code promised by the title, see <a href="https://gist.github.com/brighid/42ed997016973e16bd04df22bfd638f7">this GitHub gist</a>.</em>)</p>

<p>Making software is more work than just sitting down and writing code.
For the code you&rsquo;ve written to matter, you have to make it available to others.
Like prose or visual art, there is no &ldquo;done&rdquo; with software projects: there is only Good Enough.
Unlike prose or visual art, a software project can raise its standard of Good Enough over time by releasing new versions of the code with bug-fixes and new features.
This is where the &ldquo;make it available to others&rdquo; part starts being very difficult.
Active projects, by releasing new versions, always end up in a state of heterogeneity where not all of the project&rsquo;s users are using the same version of the project.
When active projects are incorporated into larger projects, it exacerbates the problem.
It&rsquo;s very common for active projects to advance very far as a standalone project, but to lag very far behind that advancement as part of a larger project.
Sometimes this is very difficult for users.
But it is not any one person&rsquo;s fault: it is, overwhelmingly, the emergent result of how projects interact with each other.
Today I&rsquo;m going to show how this process leads to the preÃ«minent database/ORM library in the Python world, <a href="http://www.sqlalchemy.org/">SQLAlchemy</a>, being unable to take advantage of a nearly decade-old feature of <a href="https://www.sqlite.org/">SQLite</a>, a widely-used database.</p>

<p>Let&rsquo;s start with SQLite.
Like most database systems, SQLite lets you provide connection flags (extra information) when you connect to a database.
By sending connection flags (e.g. <code>SQLITE_OPEN_READONLY</code> or <code>SQLITE_OPEN_CREATE</code>) you can have the database itself enforce restrictions on your interactions with it.
Being able to send connection flags is very helpful for programmers.
Having the database enforce the restrictions that the connection flags signify means you don&rsquo;t need to write your own enforcement code.
It also eliminates the chance of making mistakes while writing enforcement code.
You gain productivity because the time that writing and checking enforcement code would take, you can instead spend on writing other code.</p>

<p>SQLite added connection flags in version 3.5.0 (Fall 2007).
However, SQLite is a C project, not a Python project.
The connection flags are concepts that exist in SQLite&rsquo;s C code.
For them to exist in other languages, those languages (or their ecosystems) must provide a way of interacting with SQLite that permits specifying &ldquo;please send the following connection flags when you connect to the SQLite database.&rdquo;</p>

<p>Plenty of other languages already had tools for interacting with SQLite in 2007, based on a function named <code>sqlite3_open()</code>.
Because there was already plenty of software using <code>sqlite3_open()</code> and relying on its existing behavior (SQLite&rsquo;s first public release was Spring 2000), SQLite 3.5.0 also introduced a new function, <code>sqlite3_open_v2()</code>, that understood connection flags.
This allowed users to keep using <code>sqlite3_open()</code> until they were ready to change their code to use <code>sqlite3_open_v2()</code>.
Once they began using the new function, they&rsquo;d be able to use the new features.
In <a href="https://www.sqlite.org/releaselog/3_7_7.html">version 3.7.7</a> (Summer 2011), SQLite made it easier still to use the new features by teaching both the old and new versions of <code>sqlite3_open()</code> to, with a little coaxing, understand <code>file://</code> URLs<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> as well as file paths.
File paths are specific to a particular operating system or family of them, but <code>file://</code> URLs are OS-independent.
This made life slightly easier in general, but using <code>file://</code> URLs had a more important benefit as well.
Using them made it much easier to send connection flags, because SQLite permitted users to put connection flags in the <code>file://</code> URL.
Effectively, both versions of <code>sqlite3_open()</code> could now understand connection flags.
SQLite also added some <a href="https://www.sqlite.org/c3ref/open.html#urifilenamesinsqlite3open">connection flags that could <em>only</em> be used by embedding them in a <code>file://</code> URL</a>.</p>

<p>If you were writing Python instead of C, though, you couldn&rsquo;t count on having access to SQLite&rsquo;s improvements.
Python&rsquo;s support for SQLite comes from periodically incorporating code from the independent <code>pysqlite</code> project.
The <code>sqlite3</code> module in Python&rsquo;s standard library (introduced with Python 2.5&rsquo;s release, Fall 2006) is a lightly modified version of <code>pysqlite</code>.
Python 2.7 (Summer 2010) <a href="https://github.com/python/cpython/commit/b53996dead8c6a602d3f4f6c73bdd4573d0e49sef">contained version 2.6.0 of <code>pysqlite</code></a> (Spring 2010).
This version remains the core of <code>sqlite3</code> as of Python 2.7.11 (Winter 2015) and Python 3.5.2 (Summer 2016).
There does not yet exist a version of Python where the following code works<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<pre><code>import sqlite3
sqlite3.connect("file:///path/to/my/database.db")
</code></pre>

<p>There <em>are</em> workarounds, but they show how challenging it can be to get new versions of software projects into users' hands.
Fundamentally, the Python code above fails because SQLite, in the process of teaching the <code>sqlite3_open()</code> functions to understand <code>file://</code> URLs, chose to make the new feature opt-in (similar to how they distinguished between <code>sqlite3_open()</code> and <code>sqlite_v2_open</code>).
There are three times when you can opt into having SQLite understand <code>file://</code> URIs: during its compilation, when it launches, and when you call it.
The <code>sqlite3</code> module, in its <code>pysqlite</code> version 2.6.0 incarnation, avails itself of none of them.
It also provides no way for users to opt in.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>
As an independent project, <code>pysqlite</code> released version 2.8.2 (Spring 2015), which <a href="https://github.com/ghaering/pysqlite/commit/46d999e5302fb58d9636759ff36e0875c0c1eeb2">added a way for users to send any connection flags</a> SQLite understands.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>
This version is not part of Python, however, and is only available for use as a standalone module when using 2.x versions of Python.
Early versions of Python 3 were also stuck with the no-URIs behavior.
Python 3.4 (Spring 2014) introduced a way to tell <code>sqlite3.connect()</code> that it should treat its input as a URL.<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>
Unlike <code>pysqlite</code>&rsquo;s improved version, the Python 3.4 change didn&rsquo;t add a general way to send flags (though it did open up the &ldquo;send flags as part of a <code>file://</code> URL&rdquo; path).
Still, by mid-2015, if you were using <code>sqlite3</code>, you had a fairly good chance of being able to use connection flags.</p>

<p>There are a lot of people using SQLite who <em>aren&rsquo;t</em> using <code>sqlite3</code>, though, at least not directly.
Because of how easy it is to create bugs, some of which will be disastrous security holes, and because of how tedious it can be to write raw SQL queries, the overwhelming (and correct) consensus of the Python community is that you should use SQLAlchemy to interact with your database.
SQLAlchemy also connects to databases via URLs, but given that its decision to use URLs predates SQLite&rsquo;s by years (<a href="https://github.com/zzzeek/sqlalchemy/commit/0f42441edd8269308ec1b3c9936759a289dee826">SQLAlchemy version 0.1.0</a>, Winter 2005-06), it should be unsurprising that the two usages clash.
SQLAlchemy wants users to identify databases by URLs with the database name as the schema.
So the database in our example above would be <code>sqlite:///path/to/my/database.db</code>.
SQLAlchemy&rsquo;s database-URL schemas can have extra information (query parameters) in them, like SQLite&rsquo;s <code>file://</code> URLs, which tell it how to connect to the database.
The connection isn&rsquo;t done by SQLAlchemy, though, it&rsquo;s done by an external library.
SQLAlchemy is a layer on top of modules like <code>sqlite3</code> that understand how to directly interact with databases.
Under the hood, SQLAlchemy extracts a file path from the database URL and hands that file path to the underlying database module.
This structure, though, eliminates the possibility of asking SQLite to open a <code>file://</code> URI!
It can only send file paths to SQLite, and so the extra capabilities that SQLite activates when it sees the right prompts in a <code>file://</code> URL cannot be activated through SQLite.
SQLAlchemy does try to pass on extra arguments that it finds in the database URL, but it passes those on to underlying database modules like frozen-in-amber-since-2010 <code>sqlite3</code>.<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>
Such extra arguments change the details of <code>sqlite3</code>&rsquo;s behavior, but do not change the way it tries to connect to SQLite.
On older Python versions, <code>pysqlite</code> 2.8.2 or later can be substituted for the built-in <code>sqlite3</code>, but because <code>pysqlite</code> is not available on modern Python versions, this is not a satisfactory solution.</p>

<p>We are in a situation, nearly 10 years after SQLite introduced its connection flags and <code>file://</code> URLs, where taking advantage of those features from Python code is impossible to accomplish with the tools provided by the latest version of Python&rsquo;s best database library, running on the latest version of Python itself.
It&rsquo;s important to note that none of this is malfeasance or incompetence on the part of library or language maintainers.
Projects like the Python language, SQLAlchemy, and SQLite, prize stability very, very highly.
They are <em>infrastructure</em> projects: they want to build durably and to provide durable materials for others to build atop, and they are not wrong in how often they value this above convenience.
The power of defaults is very important here, too: although many OSes ship with Python and/or SQLite built in, those projects in turn have their own release cycles and their own stability concerns.
The first version of <a href="http://robservatory.com/behind-os-xs-modern-face-lies-an-aging-collection-of-unix-tools/">OS X that shipped with a SQLite version</a> able to understand <code>file://</code> URIs was summer 2012&rsquo;s OS X 10.8 &ldquo;Mountain Lion&rdquo; (Summer 2012).
Debian-stable didn&rsquo;t ship with such a SQLite until midway through <code>wheezy</code>&rsquo;s patch sequence (2014).
Ubuntu picked it up faster, incorporating SQLite 3.7.7 in their Oneiric Ocelot release (Fall 2011).
All of these infrastructure projects, reasonably enough, tend to defer building support for any particular thing until they are sure that their users <em>can</em> and <em>want to</em> use it.
Frustratingly, they can unintentionally enable each other in delaying support.
But there is no archfiend actively obstructing the uptake of new versions, just a collection of overworked engineers trying to build things that won&rsquo;t fall apart too easily.</p>

<p>Fortunately, individual programmers writing brand-new projects have no old versions to be bound to.
We can, by investing a little work, make different decisions about stability than project maintainers.
This brings us around to the promise in this post&rsquo;s title.
Python, <code>sqlite3</code>, and SQLAlchemy were all written by clever people with an interest in flexibility.
The tools that they&rsquo;re eager to give us, the defaults, are not the only tools they can give us: there are others.
Let&rsquo;s use those others.</p>

<p>The code below follows a fairly straightforward strategy.
Given a file path and some arguments to pass to SQLite, it begins with some basic plausibility checks.
It ignores the arguments and uses only the path if the caller has an ancient version of SQLite or wants SQLite&rsquo;s <code>:memory:</code> database.
Otherwise, it turns the file path and the arguments into a <code>file://</code> URL, then tries to connect to that URL.
First it tries in the way that Python 3.4+ allows, with a <code>uri=True</code> parameter.
If trying to connect that way is met with &ldquo;I know no such parameter as <code>uri</code>&rdquo;, we know we&rsquo;re on an earlier version of Python.
But since we know that SQLite and <code>sqlite3</code> are available, we use <code>ctypes</code> to reach into the Python/C communication channel that the <code>sqlite3</code> library has already set up.
We prod the variable in C code that tells SQLite we&rsquo;re opting into our input being treated as a URL, then connect again with our URL.
Finally, we create a SQLAlchemy engine.
We tell it that we&rsquo;re connecting to an empty URL<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>, but we also tell it &ldquo;when you go to connect to that URL, use this object we&rsquo;re handing you in order to establish that connection.&rdquo;
The object we hand it is the SQLite connection we just established, which SQLAlchemy doesn&rsquo;t know how to create by itself.</p>

<p>This strategy has some limitations: it definitely won&rsquo;t work as-is on PyPy or Jython, and it&rsquo;s superfluous if you know your project will run only on Python 3.4+.
However, if you want your project to run on multiple versions of Python and to have access to nice SQLite features on all of them, this function will, I hope, get you to that point.
I should also note that I drew inspiration from <a href="https://github.com/pudo/dataset/issues/136">this GitHub issue</a> and <a href="https://gist.github.com/achimnol/3021995">this Gist</a>: the digging is all me, however, as is the unit test.
I&rsquo;m firmly of the opinion that if you tell someone you have code that can solve their problem, the code you provide should be tested.</p>

<p><noscript><pre>import os.path
import re
import sqlite3
from sqlalchemy import create_engine

def create_sqlite_engine(sqlite_path,
                         read_only=None, create_db=None, **kwargs):
    &quot;&quot;&quot;
    Open SQLite with appropriate use of connection flags.

    This is harder than it sounds.
    &quot;&quot;&quot;
    # Requirements: sqlite_path must be either &#39;:memory:&#39; or the output of
    # os.path.abspath(). In this context, the SQLitePathType class handles that
    # for us.
    log.info(&quot;Trying to connect to SQLite ({!r})&quot;.format(sqlite_path))

    sqlite_prefix = &#39;sqlite:///&#39;

    # For an in-memory DB, ignore the flags
    if sqlite_path == &#39;:memory:&#39;:
        log.info(&quot;Fallback: :memory: DB.&quot;)
        return sqlalchemy.engine.create_engine(sqlite_prefix)

    # For atrociously old versions of SQLite, ignore the flags
    if (sqlite3.sqlite_version_info &lt; (3, 7, 7)):
        log.warning((&quot;Found old SQLite version: &quot;
                     &quot;using it, but have to ignore {!r}&quot;).format(kwargs))
        return sqlalchemy.engine.create_engine(sqlite_prefix + sqlite_path)

    kwargs.pop(&#39;mode&#39;, None)
    if create_db:
        kwargs[&#39;mode&#39;] = &#39;rwc&#39;
    else:
        kwargs[&#39;mode&#39;] = &#39;rw&#39;
    # Because the read_only and create_db modes are mutually exclusive, we give
    # priority to the more restrictive mode.
    if read_only:
        kwargs[&#39;mode&#39;] = &#39;ro&#39;

    # Normalize sqlite_path from a platform-bound file path to a
    # platform-agnostic file:// URI (see https://www.sqlite.org/uri.html for
    # details of SQLite&#39;s file:// URI requirements).
    sqlite_path = re.sub(r&#39;\?&#39;, r&#39;%3f&#39;, sqlite_path)
    sqlite_path = re.sub(&#39;#&#39;, r&#39;%23&#39;, sqlite_path)
    drive, sqlite_path = os.path.splitdrive(sqlite_path)

    path_segments = []
    path_head, path_tail = os.path.split(sqlite_path)
    while path_tail != &#39;&#39;:
        path_segments = [path_tail] + path_segments
        path_head, path_tail = os.path.split(path_head)
    if drive != &#39;&#39;:
        path_segments = [drive] + path_segments

    try:
        # Python 3
        query_string = urlparse.urlencode(kwargs)
    except AttributeError:
        # Python 2
        query_string = urllib.urlencode(kwargs)

    file_uri = urlparse.urlunparse(
        (&quot;file&quot;,  # Scheme
         &#39;&#39;,  # Netloc (localhost)
         &#39;/&#39;.join(path_segments),  # Path
         &quot;&quot;,  # Params
         query_string,  # Query
         &quot;&quot;,  # Fragment
         ))

    log.debug(&quot;Database URI: {!r}&quot;.format(file_uri))

    def _sqlite_conn_creator():
        try:
            log.debug(&quot;Trying the easy way...&quot;)
            # In Python 3.4+, we can do this the easy way.
            conn = sqlite3.connect(file_uri, uri=True)
        except TypeError:
            log.debug(&quot;Trying ctypes hackage...&quot;)
            # The ctypes way is not the easy way (nor is it the &quot;compatible
            # with anything but CPython&quot; way).
            import ctypes
            import ctypes.util
            sqlite = ctypes.CDLL(ctypes.util.find_library(&#39;sqlite3&#39;))

            # https://www.sqlite.org/c3ref/c_config_covering_index_scan.html
            SQLITE_CONFIG_URI = 17
            sqlite.sqlite3_config(SQLITE_CONFIG_URI, 1)
            conn = sqlite3.connect(file_uri)

        return conn

    # Dust our hands off, give the caller what they asked for, pretend we
    # didn&#39;t do anything disreputable just now.
    return sqlalchemy.engine.create_engine(sqlite_prefix,
                                           creator=_sqlite_conn_creator)
</pre></noscript><script src="https://gist.github.com/brighid/42ed997016973e16bd04df22bfd638f7.js"> </script></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>URIs, if you&rsquo;re picky.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Specifically, you&rsquo;ll get a <code>sqlite3.OperationalError</code> that signifies a C-level <code>SQLITE_CANTOPEN</code> return code.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>To be fair, Python <em>can&rsquo;t</em> (and <strong>shouldn&rsquo;t!</strong>) compile SQLite for you.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Mostly by switching from <code>sqlite3_open()</code> to <code>sqlite3_open_v2()</code>.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Also by switching from <code>sqlite3_open()</code> to <code>sqlite3_open_v2()</code>.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>See <code>sqlalchemy.dialects.pysqlite.SQLiteDialect_pysqlite.create_connect_args()</code> for the implementation.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>Normally this gets you connected to the <code>:memory:</code> DB.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenged]]></title>
    <link href="http://stronglyemergent.com//blog/2013/challenged/"/>
    <updated>2013-03-07T15:17:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/challenged</id>
    <content type="html"><![CDATA[<p>I&rsquo;m hunting for a new job right now: that&rsquo;s always a tricky thing, and it&rsquo;s easy for it to make me nervous.
I&rsquo;m in that bootstrapped/self-taught bind where my skillset and rÃ©sumÃ© look weird to the corporate world&mdash;
I taught myself Python and then fell in love with Emacs Lisp, especially its overlap with Common Lisp;
I&rsquo;m proficient with both of those and speak JavaScript at the high-school Spanish level.
I&rsquo;m also reading up on Objective-C, have brushed up against Ruby a few times, grasp the basics of Perl, have put together a cohesive LaTeX document, think of Git as a basic requirement of any remotely serious project, and can run basic SQL queries.
<a href="https://github.com/brighid/">I have a GitHub profile</a> that I&rsquo;m gradually adding code to, and this blog where I&rsquo;m getting back into the habit of article-length writing.
I am, in other words, an engineer entirely capable of finding their own ass with both hands.</p>

<p>&ldquo;That&rsquo;s nice,&rdquo; said my management-track pal.
&ldquo;What do you want to <em>do</em>?
Where do you want to work in particular&mdash;what kind of work do you want to do&mdash;what are you doing to do for them?&rdquo;</p>

<p>That takes some more thought.
I&rsquo;m just far enough along to be conscious of the green-engineer fallacy of wanting to work with a language instead of wanting to work on a project, so I can&rsquo;t say something as facile as &ldquo;I want a Lisp job!&rdquo;;
similarly, while I identify with Bay Area startup culture pretty strongly, &ldquo;I want to work at a startup!&rdquo; isn&rsquo;t going to cut it either.
Those are <em>features</em> I want a job to have, not the job itself.</p>

<p>So in response to my friend&rsquo;s challenge, here are three specific jobs I&rsquo;d like to do.</p>

<ul>
<li><p>Work on the Unix toolchain for Apple:
new releases of OS X <a href="http://apple.blogoverflow.com/2012/07/interesting-new-unix-commandsbinaries-in-os-x-mountain-lion/">show up with new terminal utilities</a>,
and the intersection of Unix beard and Apple fan makes this a job I&rsquo;d love to do.</p></li>
<li><p>Work on the API team at Stripe or Square:
these are two of my favorite startups, and I think that payments are a hugely important place to apply the lever of technology.
Unevenly distributed information and bad liquidity are two longstanding problems: with a smartphone in everyone&rsquo;s pocket, radical improvements in our solutions to these problems are possible, and Square and Stripe are doing awesome work on that.
I&rsquo;d want to work on the API team to make the services that Stripe and Square provide as language-agnostic as possible&mdash;
the intersection of mission and language-diversity makes this a job I&rsquo;d love to do.</p></li>
<li><p>Work on open data and developer relations for CalTrain, Golden Gate Transit, MUNI, and the Bay&rsquo;s other transit agencies.
&ldquo;Which transit vehicles are where, and where will they be next?&rdquo;
is a question that people want answers to so badly that they more or less <em>inflicted</em> an API on MUNI.
I&rsquo;m a cyclist and a public transit rider;
I think that better mass-transit is good for everyone, and the interesting benefits that the transit agencies themselves could derive from good data, make this a job I&rsquo;d love to do.</p></li>
</ul>


<p>The nice thing about this exercise is that it reveals that there are a lot of interesting challenges in the world, even when you filter it down to &ldquo;software engineering jobs in the Bay Area.&rdquo;
I&rsquo;m going to keep looking, but I&rsquo;m grateful to my friend for pushing me towards this exercise.
Meantime, if you&rsquo;re reading this and you&rsquo;re willing to take a chance on a bootstrapped afficionado-of-weird-languages hacker who wants to help change the world, <a href="http://careers.stackoverflow.com/stronglyemergent">you should check out my rÃ©sumÃ©</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating vCards In Python]]></title>
    <link href="http://stronglyemergent.com//blog/2011/generating-vcards-in-python/"/>
    <updated>2011-05-02T15:21:10+00:00</updated>
    <id>http://stronglyemergent.com//blog/2011/generating-vcards-in-python</id>
    <content type="html"><![CDATA[<p>At work recently, I had to test an address book application.
Part of the requirement for testing was that it handle large numbers of contacts gracefully - 100, 1000, 5000, or 10,000.
My personal address book is nowhere near that big
(and I&rsquo;m not about to use it for testing),
so I turned to Python.
[The vCard format][vcard-wiki] is pretty much a special kind of text file,
so it&rsquo;s easy to create new vCards,
and a vCard can contain multiple contacts by just concatenating contacts.</p>

<p>I didn&rsquo;t find exactly what I needed already in existence,
so I wrote up a basic script to do it, and in case anyone else needs it, here it is.
It is released under the Apache Software License 2.0,
and I hope you find it useful.</p>

<p><noscript><pre>
#!/usr/bin/python

&quot;&quot;&quot;Generates an abitrary number of valid .vcf vCard contacts based on the
parameters set at the beginning of the file. See also:
http://softwareas.com/vcard-for-developers
http://en.wikipedia.org/wiki/VCard
&quot;&quot;&quot;

import random, sys

################################## Parameters ##################################

# We&#39;ll use this data no matter what the user tells us.

# What fields shall be populated?
target_fields = {&quot;Name&quot;:True,
                 &quot;FullName&quot;:True,
                 &quot;Organization&quot;:True,
                 &quot;Address&quot;:True,
                 &quot;Title&quot;:True,
                 &quot;Phone&quot;:True,
                 &quot;Email&quot;:True,}

# Data that we&#39;ll use to populate the cards&#39; fields.
first_names = [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Carol&quot;, &quot;David&quot;, &quot;Elena&quot;, &quot;Farquahd&quot;, &quot;Gretel&quot;,
               &quot;Hans&quot;, &quot;Iris&quot;, &quot;Junichi&quot;, &quot;Khalisha&quot;, &quot;Lee&quot;, &quot;Mina&quot;, &quot;Nassif&quot;,
               &quot;Oba&quot;, &quot;Prudha&quot;, &quot;Hida&quot;, &quot;Kaiu&quot;, &quot;Aaron&quot;, &quot;Sangamon&quot;,
               &quot;Ferdinand&quot;, &quot;Sanjay&quot;, &quot;Asok&quot;]
last_names = [&quot;Smith&quot;, &quot;Jones&quot;, &quot;Smythe&quot;, &quot;Jorgenson&quot;, &quot;Kim&quot;, &quot;Luxury-Yacht&quot;,
              &quot;Throatwarbler-Mangrove&quot;, &quot;Cooper&quot;, &quot;Black&quot;, &quot;Ahmedinejad&quot;,
              &quot;al-Tikriti&quot;, &quot;al-Bagram&quot;, &quot;von Trapp&quot;, &quot;von der Wallenheim&quot;,
              &quot;Gamgee&quot;, &quot;Proudfoot&quot;, &quot;Brewer&quot;, &quot;Kagehiro&quot;, &quot;Ng&quot;,
              &quot;Nguyen&quot;, &quot;Salzmann&quot;, &quot;Bear&quot;, &quot;Powers&quot;,&quot;Kusanagi&quot;, &quot;Dengo&quot;,
              &quot;Mukherjee&quot;,&quot;Balaam&quot;]

# Street numbers will be generated at random.  All addresses are
# situated in Anytown, CA, ZIP 12345, United States of America.

streets = [&quot;Paper Street&quot;, &quot;Fictional Lane&quot;, &quot;Placid Avenue&quot;, &quot;Blank Road&quot;,
           &quot;Suspicious Parkway&quot;]

orgs = [&quot;Monty Python&#39;s Flying Circus&quot;, &quot;Golden Egg Bonus Company, LLC&quot;,
        &quot;Dewey Cheatham &amp; Howe, Tax and Family Law&quot;, &quot;Improv Everywhere&quot;,
        &quot;Owl-Stretching Enthusiasts&#39; Club&quot;, &quot;International R. Mutt Fan Club&quot;,
        &quot;Paper Street Soap Company&quot;, &quot;River City Pool Table Company&quot;,
        &quot;Desert Bus Runs&quot;, &quot;Impossibilities Inc&quot;, &quot;The X-Men&quot;]

titles = [&quot;Mercenary&quot;, &quot;Chief Tomfoolery Engineer&quot;, &quot;Nonsense Supervisor&quot;,
          &quot;Skylark&quot;, &quot;Isn&#39;t It About Time For Lunch&quot;, &quot;Famous Author&quot;,
          &quot;Fictional Person&quot;, &quot;Space Traveller&quot;, &quot;Architect&quot;,
          &quot;International Person Of Mystery&quot;, &quot;Sith Lord&quot;, &quot;Sith Apprentice&quot;,
          &quot;Sith Intern&quot;, &quot;Archaeologist&quot;, &quot;Scout&quot;, &quot;Heavy&quot;, &quot;Sniper&quot;]

# Phone numbers will be generated in the form 555-NNNN.
# Email addresses will be generated in the form  firstname.lastname@example.com

################################## Actions ###################################

class CardFiller:
    &quot;&quot;&quot;A class whose instances take the basic dataset we&#39;re working with,
    shuffle it, and grind through generating VCard entries based on it. &quot;&quot;&quot;
    def __init__(self, first_names, last_names, streets, orgs, titles):
        self.first_names = first_names
        self.last_names = last_names
        self.streets = streets
        self.orgs = orgs
        self.titles = titles

    def prepare(self):
        for lst in [self.first_names, self.last_names,
                    self.streets, self.orgs, self.titles]:
            random.shuffle(lst)

    def fill_card(self, target_fields, position):
        &quot;&quot;&quot;Takes data and fills in fields, then creates a list of formatted
        lines that can be written into a .vcf file. Takes a position argument
        that it basically interprets as modulo the length of the list.&quot;&quot;&quot;
        new_card = [&quot;BEGIN:VCARD&quot;, &quot;VERSION:2.1&quot;,]
        # Fill the Name field.
        if &quot;Name&quot; in target_fields:
            namefield = &quot;N:&quot;
            namefield += str(self.last_names[position % len(self.last_names)])
            namefield +=&quot;;&quot;
            namefield += str(self.first_names[position % len(self.first_names)])
            new_card.append(namefield)
        if &quot;FullName&quot; in target_fields:
            fnamefield = &quot;FN:&quot;
            fnamefield += str(self.first_names[position % len(self.first_names)])
            fnamefield += &quot; &quot;
            fnamefield += str(self.last_names[position % len(self.last_names)])
            new_card.append(fnamefield)
        if &quot;Organization&quot; in target_fields:
            orgfield = &quot;ORG:&quot;
            orgfield += str(self.orgs[position % len(self.orgs)])
            new_card.append(orgfield)
        if &quot;Title&quot; in target_fields:
            titlefield = &quot;TITLE:&quot;
            titlefield += str(self.titles[position % len(self.titles)])
            new_card.append(titlefield)
        if &quot;Phone&quot; in target_fields:
            phonefield = &quot;TEL;WORK;VOICE:(&quot;
            phonefield += str(random.randrange(100,999))
            phonefield += &quot;) 555-&quot;
            phonefield += &quot;%04d&quot; % random.randrange(0,9999)
            new_card.append(phonefield)
        if &quot;Address&quot; in target_fields:
            addrfield = &quot;ADR;WORK:;;&quot;
            addrfield += str(random.randrange(1,18234))
            addrfield += &quot; &quot;
            addrfield += str(self.streets[position % len(self.streets)])
            addrfield += &quot;;Anytown;CA;12345;United States of America&quot;
            new_card.append(addrfield)
        if &quot;Email&quot; in target_fields:
            emailfield = &quot;EMAIL;PREF;INTERNET:&quot;
            emailfield += str.lower(self.first_names[position % len(self.first_names)])
            emailfield += str.lower(self.last_names[position % len(self.last_names)])
            emailfield += &quot;@example.com&quot;
            new_card.append(emailfield)
        new_card.append(&quot;REV:%d&quot; % random.randrange(100,500))
        new_card.append(&quot;END:VCARD&quot;)
        return new_card


def rolodex_engine(card_limit, target_fields):
    &quot;&quot;&quot;Iterates over a range to generate a list of strings that can be
    sent to file or to stdout and which constitute a valid vcard file.
    Most programs that read vcards can accept a file that contains
    multiple vcards - all you have to do is concatenate them.&quot;&quot;&quot;
    card_engine = CardFiller(first_names, last_names, streets, orgs, titles)
    card_engine.prepare()
    rolodex = []
    for i in range(1, card_limit+1):
        new_card = card_engine.fill_card(target_fields, i)
        for line in new_card:
            rolodex.append(line)
    return rolodex

################################### Execution ##################################

if __name__ == &#39;__main__&#39;:
    &quot;&quot;&quot;Run a variety of sanity checks regarding the arguments to the
    script.  If there are no command-line arguments, give the user a
    hint. If the arguments are weird, quit and ask them to try
    again. User input and the filesystem: two pain-in-the-butt parts
    of software engineering.&quot;&quot;&quot;
    # Sanity checks.
    if len(sys.argv) != 3:
        print &quot;This script requires exactly two arguments: \n&quot;,
        print &quot;* The number of vCards to generate \n&quot;,
        print  &quot;* The name of the file to store them in. \n&quot;
        sys.exit()
    if type(sys.argv[2]) != type(&quot;string&quot;):
        print &quot;The first argument must be a number, the second a name.&quot;
        sys.exit()
    try:
        int(sys.argv[1])
    except ValueError:
        print &quot;The first argument must be a number, the second a name.&quot;
        sys.exit()
    if int(sys.argv[1]) &gt; 2**16:
        print &quot;Try generating less than 65,000 cards.&quot;
        sys.exit()
    if len(sys.argv[2]) &gt; 128:
        print &quot;Try a shorter filename.&quot;
        sys.exit()
    card_limit = int(sys.argv[1])
    card_export_file = sys.argv[2]
    # Writing to disk.
    try:
        with open(&quot;./%s&quot; % card_export_file, &quot;r&quot;) as rolodex_file:
            print &quot;A file with that name already exists.&quot;
            sys.exit()
    except IOError, ioerr_msg:
        try:
            with open(&quot;./%s&quot; % card_export_file, &quot;w&quot;) as rolodex_file:
                rolodex = rolodex_engine(card_limit, target_fields)
                for c in rolodex:
                    rolodex_file.write(c)
                    rolodex_file.write(&quot;\n&quot;)
        except IOError, ioerr_msg:
            print &quot;The script couldn&#39;t create a file for the vcards.&quot;
            print &quot;The specific problem was &#39;%s&#39;&quot; % ioerr_msg
</pre></noscript><script src="https://gist.github.com/brighid/58519d5849701a1f4ec2.js?file=vcard_generator.py"> </script></p>

<p>Writing this was basically like doing sit-ups in Python&mdash;not really challenging,
but demanded like all serious tasks that you sit down and devote time and concentration to it.
After that, results come easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pylons Field Scheduler: Planning]]></title>
    <link href="http://stronglyemergent.com//blog/2010/pylons-field-scheduler-planning/"/>
    <updated>2010-03-15T06:01:10+00:00</updated>
    <id>http://stronglyemergent.com//blog/2010/pylons-field-scheduler-planning</id>
    <content type="html"><![CDATA[<p>I&rsquo;d been leaning on the digital version of <a href="http://pylonsbook.com">The Definitive Guide to Pylons</a>, but I was gifted <a href="http://www.amazon.com/gp/product/1590599349?ie=UTF8&amp;tag=stronemerg-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1590599349">the physical version</a> not too long ago.
I&rsquo;m jazzed about that: having another form for that data is going to be useful for me.
With that in hand, I&rsquo;m starting on another Pylons project.
This may evolve into my project for the Pylons course that I&rsquo;m trying to get my school to approve, but I&rsquo;m going to do it even if I don&rsquo;t get the class approved, because it&rsquo;s interesting and if I do it well it&rsquo;ll be useful to someone I care about.</p>

<p>This is a trivial project overall, but that&rsquo;s what you do as part of the learning curve.
This project will create a web site for scheduling the use of sports fields.
Users will be able to visit the site and easily see what&rsquo;s currently scheduled and create requests for field usage.
Fields will show up as available at a given time, booked, or request-pending.
Requests go to field coordinators, who resolve conflicts and approve requests for field usage.
They should be able to do this as quickly as possible - current mechanism envisions that field requests generate an email to the coordinator or coordinators, who can click on a generated link in the URL and approve the request just by that click.
Non-response is the same as declining approval.
So the coordinators have a bit of a workload, but that&rsquo;s what it means to be a coordinator anyhow.</p>

<p>Expect more posts to show up with notes towards this project.
I&rsquo;ve got a catchy name for it, too.
&ldquo;Field Availability and Scheduling Tool.&rdquo;
FAST - that&rsquo;s a good acronym, not worsened by the number of projects that have already used it.</p>

<p>What I&rsquo;ll be trying to consciously think of during this project is data structures.
What do I need to provide?
What kind of database structure is best for sitting under this, even if I&rsquo;m only going to interact with it through SQLAlchemy?
How can I keep the system open to further use with minimal overhead?</p>

<p>My ambition - we&rsquo;ll see if I can actually pull it off - is to follow this up with an app that creates a schedule for students and teachers given a set of constraints (working on <a href="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem">3SAT problems</a>, basically, and trying to figure out what the difficulty class of this one is).
After that, I&rsquo;d like to write a recommendation engine.
Neither of these are trivial projects, and there&rsquo;s a pretty good chance that I won&rsquo;t get them done before graduation.
That&rsquo;s okay.
The journey is the important thing; and if I make it through the journey to get them working (nevermind working at a high level of optimization), I&rsquo;ll be willing to call myself pretty handy with Python.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summer of Python 2010]]></title>
    <link href="http://stronglyemergent.com//blog/2010/summer-of-python-2010/"/>
    <updated>2010-03-10T22:54:13+00:00</updated>
    <id>http://stronglyemergent.com//blog/2010/summer-of-python-2010</id>
    <content type="html"><![CDATA[<p>I&rsquo;m watching the <a href="http://socghop.appspot.com/">2010 Google Summer of Code</a> page pretty closely.
Ever since I found out that it existed, last year, I&rsquo;ve wanted to go for it, and my progress with Python has picked up again recently.
My school schedule has currently changed in such a way that I have nearly three hours of quiet, uninterrupted time that it&rsquo;s easy to spend in front of a terminal session.
It will not surprise the coders in the audience to learn that this has done wonders for my productivity.
I&rsquo;m making progress on my current Pylons project and researching contributors to the Summer of Code, considering projects that I could contribute to.</p>

<p>One thing that I like a great deal about the program is that it emphasizes a couple of virtues that our current economic arrangement has nearly downsized out of existence: community contribution and mentorship.
I love that it connects students to their professional community, that it gives them - us, I hope! - a place to start, someplace to begin a career doing what they love.
I have heard the complaint far too many times - and made it far too many times - to be unsympathetic to &ldquo;how do I get into this business, it seems like there&rsquo;s no room at all for a beginner.&rdquo;
With the squeezing-out of apprenticeships and other transitions from student to professional, it&rsquo;s definitely harder for a lot of us to get into careers doing what we love.
I&rsquo;m sad about that, and I think that it&rsquo;s a major bug in the current way that we run our affairs.</p>

<p>But it&rsquo;s fixable.</p>

<p>I particularly like the Google SOC fix because it also encourages community contribution, giving of oneself in order to make the community better.
Sure, there&rsquo;s a selfish angle - but I think that productive selfishness like this can get a whole lot done, and it&rsquo;s pretty easy to encourage people to do it.
Cautiously and prudently directed, selfishness can accomplish very positive things, especially when your definition of selfishness is as broad as mine.</p>
]]></content>
  </entry>
  
</feed>
