<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/python/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2016-07-20T19:23:06-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Challenged]]></title>
    <link href="http://stronglyemergent.com//blog/2013/challenged/"/>
    <updated>2013-03-07T15:17:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/challenged</id>
    <content type="html"><![CDATA[<p>I&rsquo;m hunting for a new job right now: that&rsquo;s always a tricky thing, and it&rsquo;s easy for it to make me nervous.
I&rsquo;m in that bootstrapped/self-taught bind where my skillset and résumé look weird to the corporate world&mdash;
I taught myself Python and then fell in love with Emacs Lisp, especially its overlap with Common Lisp;
I&rsquo;m proficient with both of those and speak JavaScript at the high-school Spanish level.
I&rsquo;m also reading up on Objective-C, have brushed up against Ruby a few times, grasp the basics of Perl, have put together a cohesive LaTeX document, think of Git as a basic requirement of any remotely serious project, and can run basic SQL queries.
<a href="https://github.com/brighid/">I have a GitHub profile</a> that I&rsquo;m gradually adding code to, and this blog where I&rsquo;m getting back into the habit of article-length writing.
I am, in other words, an engineer entirely capable of finding their own ass with both hands.</p>

<p>&ldquo;That&rsquo;s nice,&rdquo; said my management-track pal.
&ldquo;What do you want to <em>do</em>?
Where do you want to work in particular&mdash;what kind of work do you want to do&mdash;what are you doing to do for them?&rdquo;</p>

<p>That takes some more thought.
I&rsquo;m just far enough along to be conscious of the green-engineer fallacy of wanting to work with a language instead of wanting to work on a project, so I can&rsquo;t say something as facile as &ldquo;I want a Lisp job!&rdquo;;
similarly, while I identify with Bay Area startup culture pretty strongly, &ldquo;I want to work at a startup!&rdquo; isn&rsquo;t going to cut it either.
Those are <em>features</em> I want a job to have, not the job itself.</p>

<p>So in response to my friend&rsquo;s challenge, here are three specific jobs I&rsquo;d like to do.</p>

<ul>
<li><p>Work on the Unix toolchain for Apple:
new releases of OS X <a href="http://apple.blogoverflow.com/2012/07/interesting-new-unix-commandsbinaries-in-os-x-mountain-lion/">show up with new terminal utilities</a>,
and the intersection of Unix beard and Apple fan makes this a job I&rsquo;d love to do.</p></li>
<li><p>Work on the API team at Stripe or Square:
these are two of my favorite startups, and I think that payments are a hugely important place to apply the lever of technology.
Unevenly distributed information and bad liquidity are two longstanding problems: with a smartphone in everyone&rsquo;s pocket, radical improvements in our solutions to these problems are possible, and Square and Stripe are doing awesome work on that.
I&rsquo;d want to work on the API team to make the services that Stripe and Square provide as language-agnostic as possible&mdash;
the intersection of mission and language-diversity makes this a job I&rsquo;d love to do.</p></li>
<li><p>Work on open data and developer relations for CalTrain, Golden Gate Transit, MUNI, and the Bay&rsquo;s other transit agencies.
&ldquo;Which transit vehicles are where, and where will they be next?&rdquo;
is a question that people want answers to so badly that they more or less <em>inflicted</em> an API on MUNI.
I&rsquo;m a cyclist and a public transit rider;
I think that better mass-transit is good for everyone, and the interesting benefits that the transit agencies themselves could derive from good data, make this a job I&rsquo;d love to do.</p></li>
</ul>


<p>The nice thing about this exercise is that it reveals that there are a lot of interesting challenges in the world, even when you filter it down to &ldquo;software engineering jobs in the Bay Area.&rdquo;
I&rsquo;m going to keep looking, but I&rsquo;m grateful to my friend for pushing me towards this exercise.
Meantime, if you&rsquo;re reading this and you&rsquo;re willing to take a chance on a bootstrapped afficionado-of-weird-languages hacker who wants to help change the world, <a href="http://careers.stackoverflow.com/stronglyemergent">you should check out my résumé</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating vCards In Python]]></title>
    <link href="http://stronglyemergent.com//blog/2011/generating-vcards-in-python/"/>
    <updated>2011-05-02T08:21:10-07:00</updated>
    <id>http://stronglyemergent.com//blog/2011/generating-vcards-in-python</id>
    <content type="html"><![CDATA[<p>At work recently, I had to test an address book application.
Part of the requirement for testing was that it handle large numbers of contacts gracefully - 100, 1000, 5000, or 10,000.
My personal address book is nowhere near that big
(and I&rsquo;m not about to use it for testing),
so I turned to Python.
[The vCard format][vcard-wiki] is pretty much a special kind of text file,
so it&rsquo;s easy to create new vCards,
and a vCard can contain multiple contacts by just concatenating contacts.</p>

<p>I didn&rsquo;t find exactly what I needed already in existence,
so I wrote up a basic script to do it, and in case anyone else needs it, here it is.
It is released under the Apache Software License 2.0,
and I hope you find it useful.</p>

<p><noscript><pre>
#!/usr/bin/python

&quot;&quot;&quot;Generates an abitrary number of valid .vcf vCard contacts based on the
parameters set at the beginning of the file. See also:
http://softwareas.com/vcard-for-developers
http://en.wikipedia.org/wiki/VCard
&quot;&quot;&quot;

import random, sys

################################## Parameters ##################################

# We&#39;ll use this data no matter what the user tells us.

# What fields shall be populated?
target_fields = {&quot;Name&quot;:True,
                 &quot;FullName&quot;:True,
                 &quot;Organization&quot;:True,
                 &quot;Address&quot;:True,
                 &quot;Title&quot;:True,
                 &quot;Phone&quot;:True,
                 &quot;Email&quot;:True,}

# Data that we&#39;ll use to populate the cards&#39; fields.
first_names = [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Carol&quot;, &quot;David&quot;, &quot;Elena&quot;, &quot;Farquahd&quot;, &quot;Gretel&quot;,
               &quot;Hans&quot;, &quot;Iris&quot;, &quot;Junichi&quot;, &quot;Khalisha&quot;, &quot;Lee&quot;, &quot;Mina&quot;, &quot;Nassif&quot;,
               &quot;Oba&quot;, &quot;Prudha&quot;, &quot;Hida&quot;, &quot;Kaiu&quot;, &quot;Aaron&quot;, &quot;Sangamon&quot;,
               &quot;Ferdinand&quot;, &quot;Sanjay&quot;, &quot;Asok&quot;]
last_names = [&quot;Smith&quot;, &quot;Jones&quot;, &quot;Smythe&quot;, &quot;Jorgenson&quot;, &quot;Kim&quot;, &quot;Luxury-Yacht&quot;,
              &quot;Throatwarbler-Mangrove&quot;, &quot;Cooper&quot;, &quot;Black&quot;, &quot;Ahmedinejad&quot;,
              &quot;al-Tikriti&quot;, &quot;al-Bagram&quot;, &quot;von Trapp&quot;, &quot;von der Wallenheim&quot;,
              &quot;Gamgee&quot;, &quot;Proudfoot&quot;, &quot;Brewer&quot;, &quot;Kagehiro&quot;, &quot;Ng&quot;,
              &quot;Nguyen&quot;, &quot;Salzmann&quot;, &quot;Bear&quot;, &quot;Powers&quot;,&quot;Kusanagi&quot;, &quot;Dengo&quot;,
              &quot;Mukherjee&quot;,&quot;Balaam&quot;]

# Street numbers will be generated at random.  All addresses are
# situated in Anytown, CA, ZIP 12345, United States of America.

streets = [&quot;Paper Street&quot;, &quot;Fictional Lane&quot;, &quot;Placid Avenue&quot;, &quot;Blank Road&quot;,
           &quot;Suspicious Parkway&quot;]

orgs = [&quot;Monty Python&#39;s Flying Circus&quot;, &quot;Golden Egg Bonus Company, LLC&quot;,
        &quot;Dewey Cheatham &amp; Howe, Tax and Family Law&quot;, &quot;Improv Everywhere&quot;,
        &quot;Owl-Stretching Enthusiasts&#39; Club&quot;, &quot;International R. Mutt Fan Club&quot;,
        &quot;Paper Street Soap Company&quot;, &quot;River City Pool Table Company&quot;,
        &quot;Desert Bus Runs&quot;, &quot;Impossibilities Inc&quot;, &quot;The X-Men&quot;]

titles = [&quot;Mercenary&quot;, &quot;Chief Tomfoolery Engineer&quot;, &quot;Nonsense Supervisor&quot;,
          &quot;Skylark&quot;, &quot;Isn&#39;t It About Time For Lunch&quot;, &quot;Famous Author&quot;,
          &quot;Fictional Person&quot;, &quot;Space Traveller&quot;, &quot;Architect&quot;,
          &quot;International Person Of Mystery&quot;, &quot;Sith Lord&quot;, &quot;Sith Apprentice&quot;,
          &quot;Sith Intern&quot;, &quot;Archaeologist&quot;, &quot;Scout&quot;, &quot;Heavy&quot;, &quot;Sniper&quot;]

# Phone numbers will be generated in the form 555-NNNN.
# Email addresses will be generated in the form  firstname.lastname@example.com

################################## Actions ###################################

class CardFiller:
    &quot;&quot;&quot;A class whose instances take the basic dataset we&#39;re working with,
    shuffle it, and grind through generating VCard entries based on it. &quot;&quot;&quot;
    def __init__(self, first_names, last_names, streets, orgs, titles):
        self.first_names = first_names
        self.last_names = last_names
        self.streets = streets
        self.orgs = orgs
        self.titles = titles

    def prepare(self):
        for lst in [self.first_names, self.last_names,
                    self.streets, self.orgs, self.titles]:
            random.shuffle(lst)

    def fill_card(self, target_fields, position):
        &quot;&quot;&quot;Takes data and fills in fields, then creates a list of formatted
        lines that can be written into a .vcf file. Takes a position argument
        that it basically interprets as modulo the length of the list.&quot;&quot;&quot;
        new_card = [&quot;BEGIN:VCARD&quot;, &quot;VERSION:2.1&quot;,]
        # Fill the Name field.
        if &quot;Name&quot; in target_fields:
            namefield = &quot;N:&quot;
            namefield += str(self.last_names[position % len(self.last_names)])
            namefield +=&quot;;&quot;
            namefield += str(self.first_names[position % len(self.first_names)])
            new_card.append(namefield)
        if &quot;FullName&quot; in target_fields:
            fnamefield = &quot;FN:&quot;
            fnamefield += str(self.first_names[position % len(self.first_names)])
            fnamefield += &quot; &quot;
            fnamefield += str(self.last_names[position % len(self.last_names)])
            new_card.append(fnamefield)
        if &quot;Organization&quot; in target_fields:
            orgfield = &quot;ORG:&quot;
            orgfield += str(self.orgs[position % len(self.orgs)])
            new_card.append(orgfield)
        if &quot;Title&quot; in target_fields:
            titlefield = &quot;TITLE:&quot;
            titlefield += str(self.titles[position % len(self.titles)])
            new_card.append(titlefield)
        if &quot;Phone&quot; in target_fields:
            phonefield = &quot;TEL;WORK;VOICE:(&quot;
            phonefield += str(random.randrange(100,999))
            phonefield += &quot;) 555-&quot;
            phonefield += &quot;%04d&quot; % random.randrange(0,9999)
            new_card.append(phonefield)
        if &quot;Address&quot; in target_fields:
            addrfield = &quot;ADR;WORK:;;&quot;
            addrfield += str(random.randrange(1,18234))
            addrfield += &quot; &quot;
            addrfield += str(self.streets[position % len(self.streets)])
            addrfield += &quot;;Anytown;CA;12345;United States of America&quot;
            new_card.append(addrfield)
        if &quot;Email&quot; in target_fields:
            emailfield = &quot;EMAIL;PREF;INTERNET:&quot;
            emailfield += str.lower(self.first_names[position % len(self.first_names)])
            emailfield += str.lower(self.last_names[position % len(self.last_names)])
            emailfield += &quot;@example.com&quot;
            new_card.append(emailfield)
        new_card.append(&quot;REV:%d&quot; % random.randrange(100,500))
        new_card.append(&quot;END:VCARD&quot;)
        return new_card


def rolodex_engine(card_limit, target_fields):
    &quot;&quot;&quot;Iterates over a range to generate a list of strings that can be
    sent to file or to stdout and which constitute a valid vcard file.
    Most programs that read vcards can accept a file that contains
    multiple vcards - all you have to do is concatenate them.&quot;&quot;&quot;
    card_engine = CardFiller(first_names, last_names, streets, orgs, titles)
    card_engine.prepare()
    rolodex = []
    for i in range(1, card_limit+1):
        new_card = card_engine.fill_card(target_fields, i)
        for line in new_card:
            rolodex.append(line)
    return rolodex

################################### Execution ##################################

if __name__ == &#39;__main__&#39;:
    &quot;&quot;&quot;Run a variety of sanity checks regarding the arguments to the
    script.  If there are no command-line arguments, give the user a
    hint. If the arguments are weird, quit and ask them to try
    again. User input and the filesystem: two pain-in-the-butt parts
    of software engineering.&quot;&quot;&quot;
    # Sanity checks.
    if len(sys.argv) != 3:
        print &quot;This script requires exactly two arguments: \n&quot;,
        print &quot;* The number of vCards to generate \n&quot;,
        print  &quot;* The name of the file to store them in. \n&quot;
        sys.exit()
    if type(sys.argv[2]) != type(&quot;string&quot;):
        print &quot;The first argument must be a number, the second a name.&quot;
        sys.exit()
    try:
        int(sys.argv[1])
    except ValueError:
        print &quot;The first argument must be a number, the second a name.&quot;
        sys.exit()
    if int(sys.argv[1]) &gt; 2**16:
        print &quot;Try generating less than 65,000 cards.&quot;
        sys.exit()
    if len(sys.argv[2]) &gt; 128:
        print &quot;Try a shorter filename.&quot;
        sys.exit()
    card_limit = int(sys.argv[1])
    card_export_file = sys.argv[2]
    # Writing to disk.
    try:
        with open(&quot;./%s&quot; % card_export_file, &quot;r&quot;) as rolodex_file:
            print &quot;A file with that name already exists.&quot;
            sys.exit()
    except IOError, ioerr_msg:
        try:
            with open(&quot;./%s&quot; % card_export_file, &quot;w&quot;) as rolodex_file:
                rolodex = rolodex_engine(card_limit, target_fields)
                for c in rolodex:
                    rolodex_file.write(c)
                    rolodex_file.write(&quot;\n&quot;)
        except IOError, ioerr_msg:
            print &quot;The script couldn&#39;t create a file for the vcards.&quot;
            print &quot;The specific problem was &#39;%s&#39;&quot; % ioerr_msg
</pre></noscript><script src="https://gist.github.com/brighid/58519d5849701a1f4ec2.js?file=vcard_generator.py"> </script></p>

<p>Writing this was basically like doing sit-ups in Python&mdash;not really challenging,
but demanded like all serious tasks that you sit down and devote time and concentration to it.
After that, results come easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pylons Field Scheduler: Planning]]></title>
    <link href="http://stronglyemergent.com//blog/2010/pylons-field-scheduler-planning/"/>
    <updated>2010-03-14T23:01:10-07:00</updated>
    <id>http://stronglyemergent.com//blog/2010/pylons-field-scheduler-planning</id>
    <content type="html"><![CDATA[<p>I&rsquo;d been leaning on the digital version of <a href="http://pylonsbook.com">The Definitive Guide to Pylons</a>, but I was gifted <a href="http://www.amazon.com/gp/product/1590599349?ie=UTF8&amp;tag=stronemerg-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1590599349">the physical version</a> not too long ago.
I&rsquo;m jazzed about that: having another form for that data is going to be useful for me.
With that in hand, I&rsquo;m starting on another Pylons project.
This may evolve into my project for the Pylons course that I&rsquo;m trying to get my school to approve, but I&rsquo;m going to do it even if I don&rsquo;t get the class approved, because it&rsquo;s interesting and if I do it well it&rsquo;ll be useful to someone I care about.</p>

<p>This is a trivial project overall, but that&rsquo;s what you do as part of the learning curve.
This project will create a web site for scheduling the use of sports fields.
Users will be able to visit the site and easily see what&rsquo;s currently scheduled and create requests for field usage.
Fields will show up as available at a given time, booked, or request-pending.
Requests go to field coordinators, who resolve conflicts and approve requests for field usage.
They should be able to do this as quickly as possible - current mechanism envisions that field requests generate an email to the coordinator or coordinators, who can click on a generated link in the URL and approve the request just by that click.
Non-response is the same as declining approval.
So the coordinators have a bit of a workload, but that&rsquo;s what it means to be a coordinator anyhow.</p>

<p>Expect more posts to show up with notes towards this project.
I&rsquo;ve got a catchy name for it, too.
&ldquo;Field Availability and Scheduling Tool.&rdquo;
FAST - that&rsquo;s a good acronym, not worsened by the number of projects that have already used it.</p>

<p>What I&rsquo;ll be trying to consciously think of during this project is data structures.
What do I need to provide?
What kind of database structure is best for sitting under this, even if I&rsquo;m only going to interact with it through SQLAlchemy?
How can I keep the system open to further use with minimal overhead?</p>

<p>My ambition - we&rsquo;ll see if I can actually pull it off - is to follow this up with an app that creates a schedule for students and teachers given a set of constraints (working on <a href="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem">3SAT problems</a>, basically, and trying to figure out what the difficulty class of this one is).
After that, I&rsquo;d like to write a recommendation engine.
Neither of these are trivial projects, and there&rsquo;s a pretty good chance that I won&rsquo;t get them done before graduation.
That&rsquo;s okay.
The journey is the important thing; and if I make it through the journey to get them working (nevermind working at a high level of optimization), I&rsquo;ll be willing to call myself pretty handy with Python.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summer of Python 2010]]></title>
    <link href="http://stronglyemergent.com//blog/2010/summer-of-python-2010/"/>
    <updated>2010-03-10T14:54:13-08:00</updated>
    <id>http://stronglyemergent.com//blog/2010/summer-of-python-2010</id>
    <content type="html"><![CDATA[<p>I&rsquo;m watching the <a href="http://socghop.appspot.com/">2010 Google Summer of Code</a> page pretty closely.
Ever since I found out that it existed, last year, I&rsquo;ve wanted to go for it, and my progress with Python has picked up again recently.
My school schedule has currently changed in such a way that I have nearly three hours of quiet, uninterrupted time that it&rsquo;s easy to spend in front of a terminal session.
It will not surprise the coders in the audience to learn that this has done wonders for my productivity.
I&rsquo;m making progress on my current Pylons project and researching contributors to the Summer of Code, considering projects that I could contribute to.</p>

<p>One thing that I like a great deal about the program is that it emphasizes a couple of virtues that our current economic arrangement has nearly downsized out of existence: community contribution and mentorship.
I love that it connects students to their professional community, that it gives them - us, I hope! - a place to start, someplace to begin a career doing what they love.
I have heard the complaint far too many times - and made it far too many times - to be unsympathetic to &ldquo;how do I get into this business, it seems like there&rsquo;s no room at all for a beginner.&rdquo;
With the squeezing-out of apprenticeships and other transitions from student to professional, it&rsquo;s definitely harder for a lot of us to get into careers doing what we love.
I&rsquo;m sad about that, and I think that it&rsquo;s a major bug in the current way that we run our affairs.</p>

<p>But it&rsquo;s fixable.</p>

<p>I particularly like the Google SOC fix because it also encourages community contribution, giving of oneself in order to make the community better.
Sure, there&rsquo;s a selfish angle - but I think that productive selfishness like this can get a whole lot done, and it&rsquo;s pretty easy to encourage people to do it.
Cautiously and prudently directed, selfishness can accomplish very positive things, especially when your definition of selfishness is as broad as mine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The OS We're All Running]]></title>
    <link href="http://stronglyemergent.com//blog/2010/the-os-were-all-running/"/>
    <updated>2010-03-05T14:05:16-08:00</updated>
    <id>http://stronglyemergent.com//blog/2010/the-os-were-all-running</id>
    <content type="html"><![CDATA[<p>Core Security Labs, in <a href="http://www.darkreading.com/story/showArticle.jhtml?articleID=223101626">an announcement to the press at the 2010 RSA Security conference</a>, has released a tool that makes it easier to perform attacks on users of the social network Twitter.
Recently, a subspecies of phishing attacks has arisen, called &ldquo;spearphishing,&rdquo; and it&rsquo;s this type of attack that the Core Security Labs tool facilitates.
Most phishing attacks, in which the attacker impersonates a legitimate organization and persuades the victim to give the attacker their credentials, are spammed out, sent to everyone available.
Spearphishing attacks are targeted to smaller groups, to organizations or individuals, and are often more effective because they are tailored to decieve that group specifically by including persuasive details related to the group or person.
As social networks continue to grow in popularity, the information that people share publicly on such networks enable spearphishing attacks.</p>

<p>The CSL tool specifically uses Twitter to perform spearphishing attacks.
A CSL researcher, Pedro Varangot, said that their tool is a framework that can be extended to use other social networks in the attack.
The attack tool framework is built on the open-source programming language Python, a favorite language for projects in the open-source world.
The researchers have not discovered any new software vulnerability - they&rsquo;ve just found another vector by which to deliver phishing attacks, which are basically social attacks instead of technical attacks.</p>

<p>These attacks are very relevant because they affect Windows users, Mac users, and Linux users.
Phishing attacks try to fool the user much more than they try to fool the computer.
That means that no matter what operating system you use, you&rsquo;re vulnerable to phishing attacks because you&rsquo;re still using a human brain.
Most phishing attacks, to IT people, look ludicrously simple to avoid - but there are a lot of them, and the attacker has the advantage that they only need to succeed once to win big.
We defenders need to succeed all of the time just to keep a status quo that&rsquo;s favorable to us.</p>

<p>Further, this illustrates one of Linux&rsquo;s major roles in the security world: many major security tools, especially penetration-testing tools like the CSL tool and the Metasploit framework (which some of us saw in action at the RSA conference) are built on Linux.
Linux&rsquo;s modification-friendliness means that it&rsquo;s a superior platform for performing attacks.
It&rsquo;s easier to modify Linux into an attack platform than it is to twist Windows into that role.
Regardless of platform, though, it&rsquo;s very important for us as IT people to keep in mind that we&rsquo;ve progressed in security to the point where we humans are the weakest part of the security fence - and so there are more and more attacks that target the weaknesses in human brains instead of in software.
Going forward as IT professionals, all of us will need to be educators about those weakness - and about how to compensate for them.</p>

<p>At least until we have clients and IT users who are not human, which will bring its own set of problems.</p>
]]></content>
  </entry>
  
</feed>
