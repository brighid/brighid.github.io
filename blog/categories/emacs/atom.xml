<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2017-10-31T10:50:08-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging exercise: Homebrew, Notmuch, and the missing manpages]]></title>
    <link href="http://stronglyemergent.com//blog/2017/homebrew-notmuch-missing-manpages/"/>
    <updated>2017-10-27T02:20:00-07:00</updated>
    <id>http://stronglyemergent.com//blog/2017/homebrew-notmuch-missing-manpages</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been tinkering with the email setup on my MBP.
When I installed <a href="https://notmuchmail.org/">notmuch</a>, I encountered a bug.
Notmuch is a project that sports a majestic Unix beard,
so naturally among the forms of documentation they provide are manpages.
A quick <code>brew install notmuch</code> gave me a working <code>notmuch</code>, but no manpages.
Figuring out why the manpages didn&rsquo;t install was mildly tricky,
so I&rsquo;m writing it down here in case anyone else (possibly Future Me) has the same problem.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>When you&rsquo;re looking at a problem with command-line tools,
switching them to verbose mode is always a good place to start.
<a href="https://docs.brew.sh/Manpage.html">Homebrew normally suppresses the output</a> of installer programs,
but its <code>--verbose</code> flag makes that output visible.
The average <code>Makefile</code> can produce a lot of output, though,
so I used <code>grep</code> to see if there was any low-hanging fruit.
There was:</p>

<pre><code>brew install --verbose notmuch | egrep -i 'man.?page'
# =&gt; Checking if sphinx is available and supports nroff output... No (so will not install man pages).
</code></pre>

<p>I was puzzled: <a href="http://www.sphinx-doc.org/en/stable/">Sphinx</a> is a widely-used tool,
my system <em>does</em> have it installed, and it <em>does</em> support <code>nroff</code> output.</p>

<p>This is the point where the problem went from &ldquo;am I doing the right thing?&rdquo;
to &ldquo;why did the right thing fail to happen?&rdquo;
When problems come up, be sure to look at the possibility that the failure is your fault.
We&rsquo;ve all made errors, and humility is an important life skill.
The Sphinx error told me there was probably a bug in the code involved,
rather than in my understanding of them.
All of the code involved is freely available (thank you RMS)
so I downloaded it and took a look:</p>

<pre><code>git clone git://notmuchmail.org/git/notmuch
cd notmuch
git grep -l 'supports nroff output'
# =&gt; configure
</code></pre>

<p>Looking for the error message led me to the <a href="https://git.notmuchmail.org/git?p=notmuch;a=blob;f=configure;h=c5e2ffed9e6705a9b16f5cf52f3c57235bc40044;hb=949c27144e0b9294267511993a109c29d319a23d#l631">configure</a> script.
It&rsquo;s part of a fairly complex <code>Makefile</code> infrastructure,
but the two-part test it uses to search for Sphinx is easy to reproduce:
<code>if command -v sphinx-build &gt; /dev/null &amp;&amp; ${python} -m sphinx.writers.manpage &gt; /dev/null 2&gt;&amp;1 ;</code>
The first half reproduces with a quick copy and paste:
<code>command -v foo</code> is similar to <code>which foo</code>,
but in addition to asking whether there&rsquo;s an executable file <code>foo</code> in <code>$PATH</code>
(as <code>which</code> does), it also looks at builtins, shell functions, and aliases.
To reproduce the second half, I need the value of <code>${python}</code>,
which an earlier part of the script defines
by looking for a Python interpreter under various names.
Usually the value will be just <code>python</code>, so I used that.</p>

<pre><code>command -v sphinx-build &gt; /dev/null
echo "$?"
# =&gt; 0
python -m sphinx.writers.manpage &gt; /dev/null 2&gt;&amp;1
echo "$?"
# =&gt; 0
</code></pre>

<p>Running the configure script&rsquo;s test confirms that yes,
I have a Sphinx install that&rsquo;s capable of generating manpages.
The next question is, why is that Sphinx install not visible
when the configure script is running during installation?
Answering that question is what the <a href="https://docs.python.org/3/library/site.html">site module</a> is best at.
It&rsquo;s imported by default when you run Python, and it&rsquo;s responsible for
&ldquo;adding all the standard site-specific directories to the module search path,&rdquo;
which in turn is a critical part of what makes the <code>import</code> statement work.</p>

<p>I used <code>find $(brew --cache) -iname 'notmuch*'</code> and <code>brew formula notmuch</code>
to find the install source and the install script, then started editing.
First, I commented out the <code>sha256 "deadbeef0000"</code> lines in the install script.
Homebrew checks the SHA256 hash of sources during a normal install,
which is a good and correct security feature
that needs to be turned off for this.
Then I edited the <code>notmuch</code> configure script in the install source,
added a <code>${python} -m site</code> invocation, saved it, and ran the installation again.</p>

<pre><code>sys.path = [
    '/private/tmp/notmuch-20171027-17288-bpiisc/notmuch-0.25.1',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python36.zip',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/lib-dynload',
    '/usr/local/lib/python3.6/site-packages',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages',
]
USER_BASE: '/private/tmp/notmuch-20171027-17288-bpiisc/notmuch-0.25.1/.brew_home/Library/Python/3.6' (doesn't exist)
USER_SITE: '/private/tmp/notmuch-20171027-17288-bpiisc/notmuch-0.25.1/.brew_home/Library/Python/3.6/lib/python/site-packages' (doesn't exist)
</code></pre>

<p>Success!
Comparing this to the same invocation run from my terminal immediately points out a problem,
further highlighted by <code>site</code> helpfully adding a little &ldquo;(doesn&rsquo;t exist)&rdquo; note.</p>

<pre><code>sys.path = [
    '~/projects/notmuch',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python36.zip',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/lib-dynload',
    '~/Library/Python/3.6/lib/python/site-packages',
    '/usr/local/lib/python3.6/site-packages',
    '/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages',
]
USER_BASE: '~/Library/Python/3.6' (exists)
USER_SITE: '~/Library/Python/3.6/lib/python/site-packages' (exists)
ENABLE_USER_SITE: True
</code></pre>

<p>To confirm that this mismatch is causing a problem, I asked the system where my Sphinx install is.</p>

<pre><code>which -a sphinx-build
# =&gt; ~/Library/Python/3.6/bin/sphinx-build
pip3 show sphinx | grep -i 'location'
# =&gt; Location: ~/Library/Python/3.6/lib/python/site-packages
</code></pre>

<p>This is progress:
I have a narrow answer to the &ldquo;why did the right thing fail to happen?&rdquo; question.
The <code>~/Library/Python/3.6/lib/python/site-packages</code> path for Sphinx
tells me that I installed it via <code>pip install --user sphinx</code>.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>
The <code>/private/tmp</code> entries in the module search path tell me that during installation,
the configure script is sandboxed in a temporary directory and using that directory as <code>$HOME</code>.
When invoked from the configure script,
Python can only find packages that were installed system-wide, and Sphinx isn&rsquo;t one of them.
I took a quick trip into Homebrew&rsquo;s source code to look for sandboxing.
Because it&rsquo;s written in Ruby,
which makes it very easy to access environment variables like <code>$HOME</code>,
it&rsquo;s very easy to search for idiomatic use of environment variables.
A quick <code>cd $(brew --repository) &amp;&amp; git grep -E 'ENV\W{2}HOME\W{2}'</code>
turned up an <code>old_home = ENV["HOME"]</code> assignment in the <a href="https://github.com/Homebrew/brew/blob/1.3.6/Library/Homebrew/formula.rb#L1887">stage() function</a>,
which does indeed assign a new <code>$HOME</code> during installs.</p>

<p>As gratifying as it is to figure out why something failed,
there&rsquo;s still work to do.
There are two main tradeoffs to make after characterizing a problem:
specific versus general and workaround versus solution.
Among other costs, things closer to the &ldquo;general&rdquo; and &ldquo;solution&rdquo; poles
tend to require more control of the underlying elements
and things closer to the &ldquo;specific&rdquo; and &ldquo;workaround&rdquo; poles
tend to not be helpful to other people.
With that in mind, here are some ways to address the problem I started with.</p>

<ul>
<li><strong>Roll my own</strong>:
I already established that in my regular environment,
the configure script can find Sphinx just fine,
and <code>brew install</code> prints out the invocation it uses.
It&rsquo;s only a few steps more to compile the manpages myself:
<pre>
cd ~/projects/notmuch
PYTHON=$(which python3) ./configure \
    --prefix=/usr/local/Cellar/notmuch/0.25.1 --with-emacs \
    --emacslispdir=/usr/local/Cellar/notmuch/0.25.1/share/emacs/site-lisp/notmuch \
    --emacsetcdir=/usr/local/Cellar/notmuch/0.25.1/share/emacs/site-lisp/notmuch
make V=1 install-man
brew unlink notmuch
brew link notmuch</pre>
This is pretty much all the way out the &ldquo;specific&rdquo; and &ldquo;workaround&rdquo; axes:
it isn&rsquo;t very reproducible and it doesn&rsquo;t do anything about the underlying issue.</li>
<li><strong>Interactive install</strong>:
This is a tiny step further towards being reproducible:
Homebrew&rsquo;s sandboxing of installs is turned off if you pass the <code>--interactive</code> flag,
so if I used <code>brew install --interactive notmuch</code>,
I could run the same installation commands in my normal shell.
This still requires doing work by hand, though, so it&rsquo;s not very appealing.</li>
<li><strong>Do it live</strong>:
I could install Sphinx as a system-scope package, rather than as a user-scope package.
This is a solution that doesn&rsquo;t require doing things by hand and which might be helpful to others.
Unfortunately, it requires messing with system-level packages,
which is not something I want to do or recommend that others do.</li>
<li><strong>Save the environment</strong>:
In addition to importing <code>site</code>, Python uses the <code>$PYTHONPATH</code> environment variable to find modules.
If I added <code>$HOME/Library/Python/3.6/lib/python/site-packages</code>,
subsequent Python invocations should be able to find packages installed to that directory.
I&rsquo;d like to avoid setting <code>$PYTHONPATH</code> if I can; it&rsquo;s prone to causing problems.
For example, if you have both Python 2 and Python 3 installed, as many developers do,
setting <code>$PYTHONPATH</code> will cause both versions of Python to look at the given path for modules.
That&rsquo;s good when you&rsquo;re actively trying to develop against both versions of Python,
but bad when you&rsquo;re trying to repair the site-packages path.</li>
<li><strong>Eat the $PATH</strong>:
Another problem with changing <code>$PYTHONPATH</code> is that doing so only makes the Sphinx test halfway pass.
As part of its sandboxing, Homebrew also <a href="https://github.com/Homebrew/brew/blob/1.3.6/docs/Formula-Cookbook.md#superenv-notes">drastically restricts $PATH</a>,
leaving the <code>sphinx-build</code> executable unfindable during the installation.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>
Homebrew <em>does</em> have an affordance, however, for turning off the <code>$PATH</code> restrictions.
You can add <code>env :userpaths</code> to the formula or pass <code>--env=std</code> on the command line.
Combining these two approaches gets us to something that approaches being a good workaround:
<pre>
export PYTHON=python3.6 &amp;&amp; export PYTHONPATH=$($PYTHON -msite --user-site)
brew install --env=std notmuch
export PYTHON=&lsquo;&rsquo; &amp;&amp; export PYTHONPATH=&lsquo;&rsquo;</pre>
This isn&rsquo;t perfect, but it&rsquo;s got good reproducibility, so it&rsquo;s what I ended up doing.</li>
</ul>


<p>At this point I&rsquo;m not entirely sure whether Homebrew&rsquo;s behavior here is a bug.
I don&rsquo;t like that it discourages people from installing packages as <code>--user</code>,
and it already has the <code>setup_home()</code> function (clumsily) patching the module search path.
Needing to perpetrate <code>$PYTHONPATH</code> shenanigans is a bad sign.
The superenv approach does make installs much easier and more reproducible,
so it&rsquo;s a very good thing overall, but it could be improved.</p>

<p>What <em>is</em> clearly a bug, though, is an issue in <code>notmuch</code> that I stumbled on while digging through all this.
You can set the <code>$PYTHON</code> environment variable to tell the installation where your preferred Python install is.
The installer ignores this information when it goes to run Sphinx:
it instead takes the first <code>sphinx-build</code> it finds on your <code>$PATH</code>.
Similar to the problems with <code>$PYTHONPATH</code>, this can lead to problems
when you have both Python 3 Sphinx and Python 2 Sphinx installed.
The workaround for this is to use <code>command -v sphinx-build</code>
to check which version is first on your <code>$PATH</code> and to use that version.
This won&rsquo;t work indefinitely,
but it should work for as long as <code>notmuch</code> can be built with both Python 2 and Python 3.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Per the genre conventions of debugging posts, I&rsquo;m eliding almost all of the dead ends and unproductive attempts from this and instead writing about how I would have solved the problem if I were staring out the window on a pleasant foggy morning with a tasty cup of coffee beside me and a good night&rsquo;s sleep behind me.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>There have already been plenty of posts about this, so I&rsquo;ll say this very quickly: you should almost never <code>sudo pip install</code> anything; the right way to install in almost all circumstances is <code>pip install --user</code>.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>It would still be findable if Sphinx had been installed as a system-level module. Notice a theme?<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekend project: affiliate.el]]></title>
    <link href="http://stronglyemergent.com//blog/2013/weekend-project-affiliate-dot-el/"/>
    <updated>2013-03-21T20:16:00-07:00</updated>
    <id>http://stronglyemergent.com//blog/2013/weekend-project-affiliate-dot-el</id>
    <content type="html"><![CDATA[<p>Since I&rsquo;m searching for a new job (<a href="http://careers.stackoverflow.com/stronglyemergent">check out my CV on Stack Overflow Careers!</a>),
I&rsquo;ve been trying to gin up little personal projects and to extract what publishable code I can from my work projects.
The first result of this is <a href="https://github.com/brighid/affiliate.el">affiliate.el</a>.
It&rsquo;s a small project - very small - but it has virtues that I think make it a good component of a GitHub portfolio.</p>

<p>First, the smallness is advantage: it is a project with a <em>small, well-defined scope</em>.
That&rsquo;s important.
Projects with a large scope are prone to taking a long time, and projects with a poorly-defined scope are almost by definition a bad idea
(making a note that fail-fast rapid-iteration work is a totally reasonable thing).
The scope of this project
is &ldquo;automatically turn Amazon/iTunes URLs in text into affiliate links by extending emacs.&rdquo;
I chose that because I do the great majority of my writing (including this post) in emacs,
and because I am involved in Amazon and Apple&rsquo;s affiliate-links programs (because I like extra coffee money once in a while just
as well as the next person).
Choosing scope carefully is important for projects that are intended to accomplish a goal
(as opposed to projects where the point is to learn about the problem space, such as the Clojure thing I&rsquo;m messing with)&mdash;
and in professional life, the norm is for projects to be goal-focused.</p>

<p>The other reason that smallness is an advantage is that <code>affiliate.el</code> is small enough for someone else to sit down, read, and fully understand in one sitting.
I want to make it easy for this hypothetical code reviewer to get a grasp on what I&rsquo;ve created.
To that end, this project also demonstrates
&ldquo;behold, I write friendly code: there are clear docstrings, there is an approachable readme, and the commit messages are concise and helpful.&rdquo;
I think that this is an important skill for an engineer to have too, because coding work happens in a social context.
Your ability to explain your work to other engineers&mdash;
and to others in general&mdash;is crucial to its value being recognized.
So I want to show with this project &ldquo;I can make my code accessible to others.&rdquo;</p>

<p>Of course, those virtues only really shine in the context of good solid working code.
This too I think the project demonstrates: concise, workmanlike, idiomatic elisp with a suite of unit tests.
This code is well-formed for its environment:
it uses built-in emacs features such as <code>customize</code> and <code>provide</code> like a good citizen of its ecosystem,
it doesn&rsquo;t re-invent any wheels or require any esoteric libraries,
and it uses unit tests to demonstrate and hew to the requirements for input and output.
It is not heroic code, it&rsquo;s just solid, humble, functional code.</p>

<p>There probably aren&rsquo;t very many people to whom this little emacs module is useful as executable code,
but I&rsquo;m fine with that as long as it&rsquo;s useful for saying something about its creator.
Especially if that thing is <a href="http://careers.stackoverflow.com/stronglyemergent">&ldquo;hire this person.&rdquo;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Program Or Paradigm?]]></title>
    <link href="http://stronglyemergent.com//blog/2013/program-or-paradigm/"/>
    <updated>2013-03-03T17:08:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/program-or-paradigm</id>
    <content type="html"><![CDATA[<p>I&rsquo;m an emacs girl:
emacs is the environment that taught me to love Lisp, emacs is most of the way to becoming an extension of my desires, emacs is in Neal Stephenson&rsquo;s memorable phrase
&ldquo;the thermonuclear text editor.&rdquo;
Like everyone else who&rsquo;s smitten with it, I have a theory about What Makes Emacs Different: emacs is a paradigm, not a program.</p>

<p>Let&rsquo;s talk about interfaces.
In 1976, using computers was harder&mdash;
not because people were dumber or worse at design, but because there were fewer giants on whose shoulders to stand and because the computers themselves were incapable of working as hard.
That meant, in turn, that the 1976 OS couldn&rsquo;t be as generous to user-space programs as the 2013 OS can be.
In 2013, the OS can step up and be the primary answerer of the question, &ldquo;how do I use this computer?&rdquo;
In 1976, the OS is too busy running the computer to do more than nod in the Bourne shell&rsquo;s direction.
This has considerable downsides for programs: they have to do everything themselves.
But they have one important freedom:
they get to answer the user&rsquo;s fundamental &ldquo;how do I use this computer?&rdquo; question <em>any way they want.</em></p>

<p>In 2013, the OS has an answer to this question, more or less opinionated according to the OS.
Because it is easier to let the OS answer the question, that&rsquo;s what most programs do:
they use the OS&rsquo;s chrome, file management, and other facilities.
There are many good things about this: there are many more useful programs in the world than when programs had to do everything themselves.
But it is a tradeoff:
a program that comes from the world where the OS provides easy answers is almost completely unable to provide its own answers.</p>

<p>This is where we come back to emacs:
the reason that emacs can look so strange in 2013 is that it has its own opinions, strong ones, about how to relate to files, displays, and text.
Emacs is a <em>paradigm for how to interact with text.</em>
It has stronger opinions than modern programs because it comes from a time when programs had the ability to answer those questions themselves.
A program from the strong-OS era&mdash;
for example, Eclipse&mdash;
or which adapted itself to strong OSes&mdash;
for example, Microsoft Word&mdash;
is restricted by being situated within the boundaries established the by the OS' answer to &ldquo;how do I use this computer?&rdquo;
Eclipse and Word are <em>programs</em> that edit text.
Emacs is a <em>language</em> for editing text.</p>

<p>One of the clearest ways to see this is to compare emacs to something that&rsquo;s more similar to it than Eclipse or Word: <code>vi</code>.
With its movement-operation-modifier syntax for commands, vi has its own answer to the question
&ldquo;how do I use this computer?&rdquo;
that&rsquo;s every bit as thorny for us 2013 folks as emacs' answer&mdash;
and that&rsquo;s <a href="http://stackoverflow.com/a/1220118/">just as powerful when you grok it deeply</a>.
In the context of their 1976 roots, you can see that the creators of both vi and emacs embarked on the tremendously ambitious project of giving users a language in which to edit text.
The existence and popularity of software that&rsquo;s pushing 40 years old and still being actively used and extended, is strong evidence that both did well
(though we should check our <a href="http://en.wikipedia.org/wiki/Survivorship_bias">survivorship bias</a> and note that most programs from that era did not survive in the same way).</p>

<p>If you are someone who spends a lot of time with text, especially if you&rsquo;re a hacker, you should be using emacs or vi.
There are many <a href="http://notepad-plus-plus.org/">okay</a> and <a href="http://www.sublimetext.com/">good</a> <a href="http://www.barebones.com/products/bbedit/">tools</a> for <a href="http://www.chocolatapp.com/">editing</a> <a href="http://macromates.com/">text</a> and <a href="http://panic.com/coda/">producing</a> <a href="http://www.jetbrains.com/idea/">code</a>, especially for <a href="https://developer.apple.com/xcode/">specific</a> <a href="http://www.microsoft.com/visualstudio/eng">domains</a>, but emacs and vi are the only <em>great</em> general-purpose editors.
A program that wants to take advantage of the benefits that a modern OS offers could possibly be great&mdash;
but it would have to be a <a href="http://www.lighttable.com/">different route</a> to greatness than emacs and vi took.</p>

<p>I spend a tremendous amount of time with prose and code, and emacs is a great match for me.
For a large class of problems, my response to encountering them starts with <code>M-:</code>.
I routinely try to use emacs' keyboard shortcuts in other contexts (e.g.
switching tabs in Firefox with <code>C-x o</code>).
I was actively excited when I found out that emacs had integrated a unit testing framework.
When I tell you that you should use emacs, you should know that that&rsquo;s the kind of relationship I have with emacs.
I think you should use emacs anyhow, because I think that when a task is important to you, you should use a great tool for it, not just the first good one you find.
&ldquo;How will I use this computer to produce prose and code for the next 20 years?&rdquo;
is a very, <em>very</em> important question to me.</p>

<p>The answer is emacs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharpening My Saw: emacs]]></title>
    <link href="http://stronglyemergent.com//blog/2010/sharpening-my-saw-emacs/"/>
    <updated>2010-03-12T06:01:13+00:00</updated>
    <id>http://stronglyemergent.com//blog/2010/sharpening-my-saw-emacs</id>
    <content type="html"><![CDATA[<p>I recently re-read <a href="http://www.codinghorror.com/blog/2009/03/sharpening-the-saw.html">Jeff Atwood&rsquo;s post about sharpening your saw</a>.
It has me thinking about my personal work habits and my toolkit.
I&rsquo;m going to be writing about parts of my workflow from time to time, and exploring options.
Today, the saw in question is emacs.</p>

<p>I started using emacs about six months ago, and it&rsquo;s gotten to the point where I can&rsquo;t imagine getting programming <em>work</em> done without it.
I didn&rsquo;t realize how much time I was using moving my hands around until I started using a program that&rsquo;s got a monomania about keeping your fingers near the home keys.
At this point I have an unconditional love for emacs and I plan to be using it for the rest of my life as a Computer Person.
<a href="http://steve-yegge.blogspot.com/">Steve Yegge</a> can tell you at great length why emacs is so great, but the main thing that makes me happy is this: I can grow with emacs.
Right now, I&rsquo;m getting some pretty good mileage out of it.
As I get better at the craft, I&rsquo;ll be able to get even more out of emacs - and because it embeds one of the best domain languages out there, the upper limit of how much I can get out of emacs is so far away it might as well be measured in light years.
The local maximum of efficiency with emacs is a very, very big peak - and because getting there requires that I actively optimize emacs to myself, it&rsquo;s a peak unique to me, which makes it all the higher.</p>

<p>One symptom of this is that it&rsquo;s gotten into my life in a variety of ways.
I try to control Firefox by emacs keystrokes sometimes and I have to stop myself.
It has definitely heightened my tendency to do everything from my keyboard instead of reaching for the mouse (my intermittent wrist issues only encourage this pattern).
That&rsquo;s definitely an interesting phenomenon when a tool produces it, and it&rsquo;s worth looking into further.</p>

<p>One of the most important things to remember about this saw-sharpening, though, is that it&rsquo;s about <em>your</em> saw.
Professionals in a given field tend to converge around a constellation of tools, but each has their own favorite for their own reason.
So if you&rsquo;re reading this, that means you - and that means that you have an obligation not to stick with a tool that&rsquo;s not well-suited to you.</p>

<p>Finally, as long as we&rsquo;re talking about straight text editors, I&rsquo;m going to encourage those of you who do work in Windows towards <a href="http://notepad-plus.sourceforge.net/uk/site.htm">Notepad++</a>.
It&rsquo;s just the best notepad replacement you can get in Windows.
Even if you only use it for syntax highlighting, tabbed multiple-file handling, and regular expression searching, it is a beautiful shining gift from the open-source world and will make your life better.</p>
]]></content>
  </entry>
  
</feed>
