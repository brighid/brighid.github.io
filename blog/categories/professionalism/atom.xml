<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: professionalism | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/professionalism/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2015-11-28T03:31:05-08:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Challenged]]></title>
    <link href="http://stronglyemergent.com//blog/2013/challenged/"/>
    <updated>2013-03-07T15:17:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/challenged</id>
    <content type="html"><![CDATA[<p>I&rsquo;m hunting for a new job right now: that&rsquo;s always a tricky thing, and it&rsquo;s easy for it to make me nervous. I&rsquo;m in that bootstrapped/self-taught bind where my skillset and résumé look weird to the corporate world - I taught myself Python and then fell in love with Emacs Lisp, especially its overlap with Common Lisp; I&rsquo;m proficient with both of those and speak JavaScript at the high-school Spanish level. I&rsquo;m also reading up on Objective-C, have brushed up against Ruby a few times, grasp the basics of Perl, have put together a cohesive LaTeX document, think of Git as a basic requirement of a serious project, and can run basic SQL queries. <a href="https://github.com/brighid/">I have a GitHub profile</a> that I&rsquo;m gradually adding code to, and this blog where I&rsquo;m getting back into the habit of article-length writing. I am, in other words, an engineer entirely capable of finding their own ass with both hands.</p>

<p>&ldquo;That&rsquo;s nice,&rdquo; said my management-track pal. &ldquo;What do you want to <em>do</em>? Where do you want to work in particular &mdash; what kind of work do you want to do &mdash; what are you doing to do for them?&rdquo;</p>

<p>That takes some more thought. I&rsquo;m just far enough along to be conscious of the green-engineer fallacy of wanting to work with a language instead of wanting to work on a project, so I can&rsquo;t say something as facile as &ldquo;I want a Lisp job!&rdquo;; similarly, while I identify with Bay Area startup culture pretty strongly, &ldquo;I want to work at a startup!&rdquo; isn&rsquo;t going to cut it either. Those are <em>features</em> I want a job to have, not the job itself.</p>

<p>So in response to my friend&rsquo;s challenge, here are three specific jobs I&rsquo;d like to do.</p>

<ul>
<li><p>Work on the Unix toolchain for Apple: new releases of OS X <a href="http://apple.blogoverflow.com/2012/07/interesting-new-unix-commandsbinaries-in-os-x-mountain-lion/">show up with new terminal utilities</a>, and the intersection of Unix beard and Apple fan makes this a job I&rsquo;d love to do.</p></li>
<li><p>Work on the API team at Stripe or Square: these are two of my favorite startups, and I think that payments are a hugely important place to apply the lever of technology. Unevenly distributed information and bad liquidity are two longstanding problems: with a smartphone in everyone&rsquo;s pocket, radical improvements in our solutions to these problems are possible, and Square and Stripe are doing awesome work on that. I&rsquo;d want to work on the API team to make the services that Stripe and Square provide as language-agnostic as possible - the intersection of mission and language-diversity makes this a job I&rsquo;d love to do.</p></li>
<li><p>Work on open data and developer relations for CalTrain, Golden Gate Transit, MUNI, and the Bay&rsquo;s other transit agencies. &ldquo;Which transit vehicles are where, and where will they be next?&rdquo; is a question that people want answers to so badly that they more or less <em>inflicted</em> an API on MUNI. I&rsquo;m a cyclist and a public transit rider; I think that better mass-transit is good for everyone, and the interesting benefits that the transit agencies themselves could derive from good data, make this a job I&rsquo;d love to do.</p></li>
</ul>


<p>The nice thing about this exercise is that it reveals that there are a lot of interesting challenges in the world, even when you filter it down to &ldquo;software engineering jobs in the Bay Area.&rdquo; I&rsquo;m going to keep looking, but I&rsquo;m grateful to my friend for pushing me towards this exercise. Meantime, if you&rsquo;re reading this and you&rsquo;re willing to take a chance on a bootstrapped afficionado-of-weird-languages hacker who wants to help change the world, <a href="http://careers.stackoverflow.com/stronglyemergent">you should check out my résumé</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Recommendation I Can't Get From LinkedIn]]></title>
    <link href="http://stronglyemergent.com//blog/2011/a-recommendation-i-cant-get-from-linkedin/"/>
    <updated>2011-05-11T14:27:28-07:00</updated>
    <id>http://stronglyemergent.com//blog/2011/a-recommendation-i-cant-get-from-linkedin</id>
    <content type="html"><![CDATA[<p>This one&rsquo;s short. I had several short-term co-workers lately, and one of them at the end of her tenure left me a nice note.</p>

<p><img src="/images/thankyou.jpg" alt="" /></p>

<p>That made me really happy. Helping people is a great feeling, and so is having your work acknowledged.  It&rsquo;s interesting, too, that the very things that make it easier to communicate, can also change the tone of communication.  There are interactions where a written, physical artifact used to be required, and is no longer required. I don&rsquo;t think this was ever one of them, really. So it&rsquo;s interesting that someone went out of their way to create this. I think that&rsquo;s perhaps a valuable way to look at the difference between digital and physical-artifact communications - you can send a different message, even with the same words. The range and shape of possible expression has changed.  If we had actually lost handwritten artifacts, I&rsquo;d be sad - but we haven&rsquo;t. They merely say something different now.</p>

<p>Take ownership of all of your communication, no matter what form you put it in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kipple Piling Up]]></title>
    <link href="http://stronglyemergent.com//blog/2010/kipple-piling-up/"/>
    <updated>2010-12-05T23:01:01-08:00</updated>
    <id>http://stronglyemergent.com//blog/2010/kipple-piling-up</id>
    <content type="html"><![CDATA[<p>Philip K. Dick has contributed tremendously to the world around us, despite being dead for decades. Media inspired by Dick&rsquo;s works has far-flung influence, has soaked into our discourse.  Right now I want to talk about a concept through the lens of a term that Dick came up with: <a href="http://www.technovelgy.com/ct/content.asp?Bnum=128">Kipple</a>.</p>

<p>Kipple is junk, stuff, crap - but it&rsquo;s the kind of crap that presses your &ldquo;wait, I might need this someday!&rdquo; button, that&rsquo;s just barely worth keeping, that&rsquo;s not quite crappy enough to pitch immediately.  Kipple piles up, accumulates, metastasizes.  I say that the main form of kipple nowadays is advertising.  It is everywhere, and it is not adding value, really.  It is more noise, in a world already plenty noisy enough.  You can see it in the tendency to <a href="http://uxhero.com/ux-theory/logo-diarrhea/">plaster logos everywhere</a> especially.  It is a pathological expression of corporate insecurity, trying to make up for a desperate gnawing sensation that your product isn&rsquo;t actually useful or meaningful to people&rsquo;s lives.  People make a good living producing kipple to soothe this corporate anxiety.</p>

<p>I can&rsquo;t stand it.</p>

<p>It probably won&rsquo;t shock you to learn that I&rsquo;m the kind of person who carefully regulates their media diet.  One component that I welcome into my media diet is <a href="http://sethgodin.typepad.com/seths_blog/">Seth Godin</a>.  I tend to read Seth Godin intensively for a week once every couple of months.  This time, I found a concept that points to the harm of kipple - he posits, essentially, that <a href="http://sethgodin.typepad.com/seths_blog/2010/12/the-inevitable-decline-from-clutter.html">kipple is a bioaccumulative toxin</a>.</p>

<p>Clutter trains our brains to disregard things - and it&rsquo;s hard to undo that training.  Every attempt to break through the kipple becomes, in the end, more kipple.  The attempts become sad after a while, too.</p>

<p>In <a href="http://www.pbs.org/wgbh/pages/frontline/shows/cool/">Merchants of Cool</a> and <a href="http://www.pbs.org/wgbh/pages/frontline/shows/persuaders/">The Persuaders</a>, television programs that are essential for understanding television, we can see this process at work in its horrifying fullness.  The corporations and people generally responsible for clutter and kipple have produced a self-reinforcing process.  All the attempts to buy cool, purchase credibility, and make authenticity into a commodity, are self-defeating.  Just as <a href="http://sethgodin.typepad.com/seths_blog/2010/11/your-noise-is-still-noise.html">Godin points out</a>, it&rsquo;s all noise - and it all makes it harder to pay attention to things that matter.</p>

<p>Do us all a favor and make your next project not generate kipple (or alternatively, investigate forms of <a href="http://codeoffsets.com/Default.aspx">offsetting your kipple</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Politicos' Problematic Incentives Harm Craigslist]]></title>
    <link href="http://stronglyemergent.com//blog/2010/politicos-problematic-incentives-harm-craigslist/"/>
    <updated>2010-08-31T23:01:46-07:00</updated>
    <id>http://stronglyemergent.com//blog/2010/politicos-problematic-incentives-harm-craigslist</id>
    <content type="html"><![CDATA[<p>So there&rsquo;s <a href="http://www.sfgate.com/cgi-bin/article.cgi?f=/c/a/2010/08/29/BUGI1F4F9K.DTL">even more noise</a> about suing Craigslist, and I wish I could grab the attorneys general of 18 states by one giant pair of pinstriped lapels and shout &ldquo;You are making this problem <strong>WORSE</strong>, you buncha maroons!&rdquo;  There&rsquo;s still some space to write about this after <a href="http://stronglyemergent.com/blog/2010/the-many-forms-of-not-getting-it/">last time</a>, and I&rsquo;m gonna go ahead and fill that space.</p>

<p>The problem here is a toxic incentive structure, just like <a href="http://www.schneier.com/blog/archives/2007/02/cya_security_1.html">the reason the TSA reduces security</a>. The various political folk who are inveighing against Craigslist have no idea what they&rsquo;re talking about and are going to make Craigslist less useful for everyone and cost their taxpayers a lot of money in the process - and yet, for them personally, there is no downside to attacking Craigslist. Attacking Craigslist makes them look &ldquo;tough on crime,&rdquo; look like vigorous, active advocates of the public good, and look like paragons of conventional morality.</p>

<p>The most effective things you can do to increase airline security and reduce sex trafficking are the most boring ones, and the current structure of incentives all but guarantees that those measures will not be taken, and instead countermeasures will be taken that will make the problem worse.  This underscores again the importance of narrative.  Software providers and other technical people are in danger because of these toxic incentives - people who don&rsquo;t know how your business works could have an incentive to mess with you, and are quite likely to be immune to consequences in the practical sense.  This is why we developers and sysadmins need to be aware of the social, political, and cultural context of our professional actions - the less aware we are, the more likely that we&rsquo;ll find ourselves out of a job, at the helm of a foundering company, or forced to implement asinine requirements because of forces beyond our control.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joel on Making Choices]]></title>
    <link href="http://stronglyemergent.com//blog/2010/joel-on-making-choices/"/>
    <updated>2010-08-29T23:01:44-07:00</updated>
    <id>http://stronglyemergent.com//blog/2010/joel-on-making-choices</id>
    <content type="html"><![CDATA[<p>I have a few idea-bubbles that are always hanging around my head like the Moon around the Earth, and one of them is this: <em>everything is a trade-off</em>.  Trade-offs are everywhere; the important ones are all hard in some way - congratulations, you&rsquo;re a sysadmin or a developer, <a href="http://stronglyemergent.com/blog/2010/ill-build-my-own-phone-os-with-blackjack-and-hookers/">your job is to make hard decisions</a>. A few days after I wrote about that, Joel Spolsky <a href="http://www.joelonsoftware.com/items/2010/08/19.html">posted his talk from Business of Software 2009</a>. He&rsquo;s a great coder, a great writer, and a smokin' public speaker, you should watch it.</p>

<p>I think that Mr. Spolsky oversimplifies in one aspect of his talk.  So I&rsquo;m going to jump off from there: he says that thinking that you must choose between simplicity and power on a one-dimensional axis is a trap and that you have to construct something else to usefully think about what features software should have.  So he talks about elegance and about good features and bad features.  I&rsquo;m going to say it a slightly different way.  I just say that you do have to choose between simplicity and power - but it is possible to make good choices and bad choices.  Not every choice gives up 1 Simplon of simplicity for 1 Pill of power.  There are a lot of choices you can make that trade 2 Simplons for 4 Pills, or sometimes 1 Pill for 87 Simplons.  You&rsquo;d much rather make those than 1:1 trades, and you should spend a lot of time avoiding trades where you give up 1 Simplon and gain 0.005 Pills.</p>

<p><img src="/images/tradeoff-curves.png" alt="two plotted curves, one strictly linear and the other with a constant distance from the origin of the graph." /></p>

<p>Too often, we act like the curve on the right is what we&rsquo;re stuck with - the best we can do is those 1:1 trades.  It should be obvious, though, that we can do better.  The problem is that to do better, generally we need to make those hard decisions.  Achieving trade-offs that are better than 1:1 is hard, and it&rsquo;s easy to construct (purposefully or not) incentive structures that absolutely destroy the chances of making good trade-offs.  My favorite example of this is in airline security - we&rsquo;re trading security and convenience instead of simplicity and power, but the two problems map onto one another extremely well.  The Transportation Security Administration is living proof that 1:1 tradeoffs aren&rsquo;t the only kind - they demonstrate, every day, that you can make <em>far</em> worse trade-offs.  They&rsquo;re the <a href="http://www.schneier.com/blog/archives/2009/06/fixing_airport.html">pathologically bad case</a>, where you make so many trade-offs that are so bad that you with up far less security and far less convenience.</p>

<p>But why is that?  It&rsquo;s not because the TSA is filled with evil moustache-twirling types who want travellers to be inconvenienced.  I believe that the TSA is full of perfectly average humans who act according to their incentives, overseen and directed by perfectly average humans (who happen to be politicians) acting according to <em>their</em> incentives.  Those incentives produce the pathology, because they&rsquo;re not &ldquo;produce better security&rdquo; incentives, they&rsquo;re <a href="http://www.schneier.com/blog/archives/2007/02/cya_security_1.html">&ldquo;avoid punishment&rdquo;</a> incentives. There are few rewards for actually improving security, and tremendous punishments for <em>letting people think security has been degraded</em> &mdash; and because we laypeople assess security pretty badly, a perverse cycle of incentives produces pretty bad security.</p>

<p>This maps directly onto producing software and wrangling production servers: even though it is harder, we need to seek out those better trade-offs, and that means both difficult work and setting up good incentive systems.  That also means that the managerial professions need to be very careful about the incentive structures that they set up - the intent of an incentive structure is almost never the only outcome that that structure can produce.  When you&rsquo;re creating systems, if you refuse to take responsibility for better trade-offs, bad ones will creep in.  One of my favorite examples in software is stealing focus - when the window that you thought you were working in gets shoved behind something else that decides that it needs your attention.  Stealing focus is, I&rsquo;m convinced, the sort of sin that means you should never be allowed to touch a compiler again, and furthermore you should probably lose your right pinky, the one that you tap Enter with.  Every time I&rsquo;ve seen a window stealing focus, it&rsquo;s been at the intersection of the worst programmer habits - hubris in thinking that your program, right now, needs to be the most important thing in my computing world, and bad laziness in that the program is always asking me to make some decision that I don&rsquo;t actually need to make right now.  Of course, the existence of this capability also means that it can be used for malicious purposes in a nasty trifecta of bad UX.  Far better to use alternate notification methods (the <a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/09/10/54831.aspx">Notification Area <em>nee</em> system tray</a> in Windows, and bouncing Dock icons or Growl messages in OS X) to convey such information.</p>

<p>Like the security/convenience example, this doesn&rsquo;t happen because we programmers are finger-steepling connivers of inconvenience - it happens because, too often, our incentive structure is disconnected from what actually happens to users of our software.  This is part of why startups are a good thing to have in the world: by necessity, a startup deals much more closely with its customers, and developers routinely talk to people who actually use the software.</p>

<p>So the challenge to us is to recognize good trade-offs, and work to make those trade-offs instead of 1:1 or sub-par tradeoffs.  This involves making difficult decisions for your users - and it involves respecting that they&rsquo;re busy making their own difficult decisions, and getting out of their way.</p>
]]></content>
  </entry>
  
</feed>
