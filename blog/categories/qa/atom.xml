<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: qa | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/qa/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2016-07-20T17:15:07-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating vCards In Python]]></title>
    <link href="http://stronglyemergent.com//blog/2011/generating-vcards-in-python/"/>
    <updated>2011-05-02T08:21:10-07:00</updated>
    <id>http://stronglyemergent.com//blog/2011/generating-vcards-in-python</id>
    <content type="html"><![CDATA[<p>At work recently, I had to test an address book application.
Part of the requirement for testing was that it handle large numbers of contacts gracefully - 100, 1000, 5000, or 10,000.
My personal address book is nowhere near that big
(and I&rsquo;m not about to use it for testing),
so I turned to Python.
[The vCard format][vcard-wiki] is pretty much a special kind of text file,
so it&rsquo;s easy to create new vCards,
and a vCard can contain multiple contacts by just concatenating contacts.</p>

<p>I didn&rsquo;t find exactly what I needed already in existence,
so I wrote up a basic script to do it, and in case anyone else needs it, here it is.
It is released under the Apache Software License 2.0,
and I hope you find it useful.</p>

<p><noscript><pre>
#!/usr/bin/python

&quot;&quot;&quot;Generates an abitrary number of valid .vcf vCard contacts based on the
parameters set at the beginning of the file. See also:
http://softwareas.com/vcard-for-developers
http://en.wikipedia.org/wiki/VCard
&quot;&quot;&quot;

import random, sys

################################## Parameters ##################################

# We&#39;ll use this data no matter what the user tells us.

# What fields shall be populated?
target_fields = {&quot;Name&quot;:True,
                 &quot;FullName&quot;:True,
                 &quot;Organization&quot;:True,
                 &quot;Address&quot;:True,
                 &quot;Title&quot;:True,
                 &quot;Phone&quot;:True,
                 &quot;Email&quot;:True,}

# Data that we&#39;ll use to populate the cards&#39; fields.
first_names = [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Carol&quot;, &quot;David&quot;, &quot;Elena&quot;, &quot;Farquahd&quot;, &quot;Gretel&quot;,
               &quot;Hans&quot;, &quot;Iris&quot;, &quot;Junichi&quot;, &quot;Khalisha&quot;, &quot;Lee&quot;, &quot;Mina&quot;, &quot;Nassif&quot;,
               &quot;Oba&quot;, &quot;Prudha&quot;, &quot;Hida&quot;, &quot;Kaiu&quot;, &quot;Aaron&quot;, &quot;Sangamon&quot;,
               &quot;Ferdinand&quot;, &quot;Sanjay&quot;, &quot;Asok&quot;]
last_names = [&quot;Smith&quot;, &quot;Jones&quot;, &quot;Smythe&quot;, &quot;Jorgenson&quot;, &quot;Kim&quot;, &quot;Luxury-Yacht&quot;,
              &quot;Throatwarbler-Mangrove&quot;, &quot;Cooper&quot;, &quot;Black&quot;, &quot;Ahmedinejad&quot;,
              &quot;al-Tikriti&quot;, &quot;al-Bagram&quot;, &quot;von Trapp&quot;, &quot;von der Wallenheim&quot;,
              &quot;Gamgee&quot;, &quot;Proudfoot&quot;, &quot;Brewer&quot;, &quot;Kagehiro&quot;, &quot;Ng&quot;,
              &quot;Nguyen&quot;, &quot;Salzmann&quot;, &quot;Bear&quot;, &quot;Powers&quot;,&quot;Kusanagi&quot;, &quot;Dengo&quot;,
              &quot;Mukherjee&quot;,&quot;Balaam&quot;]

# Street numbers will be generated at random.  All addresses are
# situated in Anytown, CA, ZIP 12345, United States of America.

streets = [&quot;Paper Street&quot;, &quot;Fictional Lane&quot;, &quot;Placid Avenue&quot;, &quot;Blank Road&quot;,
           &quot;Suspicious Parkway&quot;]

orgs = [&quot;Monty Python&#39;s Flying Circus&quot;, &quot;Golden Egg Bonus Company, LLC&quot;,
        &quot;Dewey Cheatham &amp; Howe, Tax and Family Law&quot;, &quot;Improv Everywhere&quot;,
        &quot;Owl-Stretching Enthusiasts&#39; Club&quot;, &quot;International R. Mutt Fan Club&quot;,
        &quot;Paper Street Soap Company&quot;, &quot;River City Pool Table Company&quot;,
        &quot;Desert Bus Runs&quot;, &quot;Impossibilities Inc&quot;, &quot;The X-Men&quot;]

titles = [&quot;Mercenary&quot;, &quot;Chief Tomfoolery Engineer&quot;, &quot;Nonsense Supervisor&quot;,
          &quot;Skylark&quot;, &quot;Isn&#39;t It About Time For Lunch&quot;, &quot;Famous Author&quot;,
          &quot;Fictional Person&quot;, &quot;Space Traveller&quot;, &quot;Architect&quot;,
          &quot;International Person Of Mystery&quot;, &quot;Sith Lord&quot;, &quot;Sith Apprentice&quot;,
          &quot;Sith Intern&quot;, &quot;Archaeologist&quot;, &quot;Scout&quot;, &quot;Heavy&quot;, &quot;Sniper&quot;]

# Phone numbers will be generated in the form 555-NNNN.
# Email addresses will be generated in the form  firstname.lastname@example.com

################################## Actions ###################################

class CardFiller:
    &quot;&quot;&quot;A class whose instances take the basic dataset we&#39;re working with,
    shuffle it, and grind through generating VCard entries based on it. &quot;&quot;&quot;
    def __init__(self, first_names, last_names, streets, orgs, titles):
        self.first_names = first_names
        self.last_names = last_names
        self.streets = streets
        self.orgs = orgs
        self.titles = titles

    def prepare(self):
        for lst in [self.first_names, self.last_names,
                    self.streets, self.orgs, self.titles]:
            random.shuffle(lst)

    def fill_card(self, target_fields, position):
        &quot;&quot;&quot;Takes data and fills in fields, then creates a list of formatted
        lines that can be written into a .vcf file. Takes a position argument
        that it basically interprets as modulo the length of the list.&quot;&quot;&quot;
        new_card = [&quot;BEGIN:VCARD&quot;, &quot;VERSION:2.1&quot;,]
        # Fill the Name field.
        if &quot;Name&quot; in target_fields:
            namefield = &quot;N:&quot;
            namefield += str(self.last_names[position % len(self.last_names)])
            namefield +=&quot;;&quot;
            namefield += str(self.first_names[position % len(self.first_names)])
            new_card.append(namefield)
        if &quot;FullName&quot; in target_fields:
            fnamefield = &quot;FN:&quot;
            fnamefield += str(self.first_names[position % len(self.first_names)])
            fnamefield += &quot; &quot;
            fnamefield += str(self.last_names[position % len(self.last_names)])
            new_card.append(fnamefield)
        if &quot;Organization&quot; in target_fields:
            orgfield = &quot;ORG:&quot;
            orgfield += str(self.orgs[position % len(self.orgs)])
            new_card.append(orgfield)
        if &quot;Title&quot; in target_fields:
            titlefield = &quot;TITLE:&quot;
            titlefield += str(self.titles[position % len(self.titles)])
            new_card.append(titlefield)
        if &quot;Phone&quot; in target_fields:
            phonefield = &quot;TEL;WORK;VOICE:(&quot;
            phonefield += str(random.randrange(100,999))
            phonefield += &quot;) 555-&quot;
            phonefield += &quot;%04d&quot; % random.randrange(0,9999)
            new_card.append(phonefield)
        if &quot;Address&quot; in target_fields:
            addrfield = &quot;ADR;WORK:;;&quot;
            addrfield += str(random.randrange(1,18234))
            addrfield += &quot; &quot;
            addrfield += str(self.streets[position % len(self.streets)])
            addrfield += &quot;;Anytown;CA;12345;United States of America&quot;
            new_card.append(addrfield)
        if &quot;Email&quot; in target_fields:
            emailfield = &quot;EMAIL;PREF;INTERNET:&quot;
            emailfield += str.lower(self.first_names[position % len(self.first_names)])
            emailfield += str.lower(self.last_names[position % len(self.last_names)])
            emailfield += &quot;@example.com&quot;
            new_card.append(emailfield)
        new_card.append(&quot;REV:%d&quot; % random.randrange(100,500))
        new_card.append(&quot;END:VCARD&quot;)
        return new_card


def rolodex_engine(card_limit, target_fields):
    &quot;&quot;&quot;Iterates over a range to generate a list of strings that can be
    sent to file or to stdout and which constitute a valid vcard file.
    Most programs that read vcards can accept a file that contains
    multiple vcards - all you have to do is concatenate them.&quot;&quot;&quot;
    card_engine = CardFiller(first_names, last_names, streets, orgs, titles)
    card_engine.prepare()
    rolodex = []
    for i in range(1, card_limit+1):
        new_card = card_engine.fill_card(target_fields, i)
        for line in new_card:
            rolodex.append(line)
    return rolodex

################################### Execution ##################################

if __name__ == &#39;__main__&#39;:
    &quot;&quot;&quot;Run a variety of sanity checks regarding the arguments to the
    script.  If there are no command-line arguments, give the user a
    hint. If the arguments are weird, quit and ask them to try
    again. User input and the filesystem: two pain-in-the-butt parts
    of software engineering.&quot;&quot;&quot;
    # Sanity checks.
    if len(sys.argv) != 3:
        print &quot;This script requires exactly two arguments: \n&quot;,
        print &quot;* The number of vCards to generate \n&quot;,
        print  &quot;* The name of the file to store them in. \n&quot;
        sys.exit()
    if type(sys.argv[2]) != type(&quot;string&quot;):
        print &quot;The first argument must be a number, the second a name.&quot;
        sys.exit()
    try:
        int(sys.argv[1])
    except ValueError:
        print &quot;The first argument must be a number, the second a name.&quot;
        sys.exit()
    if int(sys.argv[1]) &gt; 2**16:
        print &quot;Try generating less than 65,000 cards.&quot;
        sys.exit()
    if len(sys.argv[2]) &gt; 128:
        print &quot;Try a shorter filename.&quot;
        sys.exit()
    card_limit = int(sys.argv[1])
    card_export_file = sys.argv[2]
    # Writing to disk.
    try:
        with open(&quot;./%s&quot; % card_export_file, &quot;r&quot;) as rolodex_file:
            print &quot;A file with that name already exists.&quot;
            sys.exit()
    except IOError, ioerr_msg:
        try:
            with open(&quot;./%s&quot; % card_export_file, &quot;w&quot;) as rolodex_file:
                rolodex = rolodex_engine(card_limit, target_fields)
                for c in rolodex:
                    rolodex_file.write(c)
                    rolodex_file.write(&quot;\n&quot;)
        except IOError, ioerr_msg:
            print &quot;The script couldn&#39;t create a file for the vcards.&quot;
            print &quot;The specific problem was &#39;%s&#39;&quot; % ioerr_msg
</pre></noscript><script src="https://gist.github.com/brighid/58519d5849701a1f4ec2.js?file=vcard_generator.py"> </script></p>

<p>Writing this was basically like doing sit-ups in Python&mdash;not really challenging,
but demanded like all serious tasks that you sit down and devote time and concentration to it.
After that, results come easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Worst Software Made By The Best Software Developer You've Never Heard Of]]></title>
    <link href="http://stronglyemergent.com//blog/2010/the-worst-software-made-by-the-best-software-developer-youve-never-heard-of/"/>
    <updated>2010-01-12T22:01:40-08:00</updated>
    <id>http://stronglyemergent.com//blog/2010/the-worst-software-made-by-the-best-software-developer-youve-never-heard-of</id>
    <content type="html"><![CDATA[<p>My last post, about the lessons that Wizards of the Coast has for software developers, had many oversimplifications.
One of them is this: Wizards of the Coast actually is a software developer.
They have an online version of their product (clearly labeled as &ldquo;Magic: The Gathering Online&rdquo;) that they develop in-house.
MTGO is pretty terrible.
It&rsquo;s a passable program that spent years being a crappy program.
It was a perfect example of how monopolies produce shitty products.
It&rsquo;s still the only remotely serious product in its specific market (part of how the monopoly exists is that they can offer value-adds that no one else can).</p>

<p>This shouldn&rsquo;t be surprising, though.
One thing that makes it unsurprising is that, as Nathan Bowers likes to say, <a href="http://uxhero.com/ux-theory/quality-is-fractal/">Quality Is Fractal</a>.
Look at the <a href="http://www.magicthegathering.com/">Magic: The Gathering web site</a>.
It survives and thrives because there&rsquo;s good content in there, but in many ways it&rsquo;s a design trainwreck.
Similarly, you could look at Magic itself.
Another thing that I omitted in the last post is Magic&rsquo;s bugs.
Magic&rsquo;s creators are making a game that is played by humans against humans, so the game needs to be fair.
To that end, Wizards maintains a list of banned and restricted cards that have to be treated differently so that the game remains fair.
The game contains over 10,000 cards as of this writing, and a bit over 100 have ever been on the banned/restricted list (which grows and shrinks over time).
Any card that creates enough problems to go on the list can be considered roughly equivalent to a showstopper bug in your average software program - and making it onto the list means that the &ldquo;bug&rdquo; made it into the wild instead of being caught during QA.
So despite Magic&rsquo;s impressive QA operation, bugs still get by them.</p>

<p>Making complex products - like Magic or a piece of software - isn&rsquo;t easy.
We have a whole industry built on top of our tradition of telling other people how to do things, and still the complexity of the world stymies us.
To our great benefit, we&rsquo;ve advanced to the point where we can actually solve some problems by throwing lots of computing resources at them.
Other problems, however, still need a lot of human thought and creativity put into them before they&rsquo;re soluble, and the best that we can hope for is that we can add computing resources that will let us most efficiently allocate our human thought and creativity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Software Developer You've Never Heard Of]]></title>
    <link href="http://stronglyemergent.com//blog/2010/the-best-software-developer-youve-never-heard-of/"/>
    <updated>2010-01-10T22:01:08-08:00</updated>
    <id>http://stronglyemergent.com//blog/2010/the-best-software-developer-youve-never-heard-of</id>
    <content type="html"><![CDATA[<p>Wizards of the Coast is a great software developer, and you&rsquo;ve probably never thought of them that way because they don&rsquo;t make software.
They make a card game - <a href="http://en.wikipedia.org/wiki/Magic:_The_Gathering">Magic: the Gathering</a> was a 1990s phenomenon and is one of the only card games of its time to survive.
At this point, it&rsquo;s not competing with other card games: it&rsquo;s really competing with World of Warcraft and tabletop roleplaying games.
They are successful in a way that software developers can learn from: they gather huge amounts of testing data, they release regularly, and they make sure that their developers are in frequent contact with their users.</p>

<p>Skip this paragraph if you already know how Magic works.
Magic is a collectible card game.
Wizards of the Coast prints new Magic cards four times a year.
Players buy cards in cheap randomized bunches or as expensive singles.
From their cards, players construct decks and play against one another.
They play casually and in tournaments.
Tournaments have prizes, but you can only participate in tournaments with a deck of the right format - tournaments may require decks from the last two-or-so years of cards printed, the last seven-or-so years of cards printed, or a very large subset of all cards ever printed.
Wizards of the Coast runs a series of high-profile high-prize events, and entering these events requires registering the list of cards that you used to build your deck.</p>

<p>Wizards of the Coast has been making Magic for seventeen years, and they have gathered more and more testing data as time goes on.
They gather a ridiculous amount of data about how their game is used through their Organized Play initiative, representing the usage patterns of millions of worldwide users.
All of the most intensive users of their product are sending big streams of feedback data - and not just opinion, they&rsquo;re sending behavioral data, speaking through action.
Every Magic user has a goal in mind when they use the &ldquo;software,&rdquo; and Wizards has set up a huge dragnet to gather data about how users tried to get to that goal and how successful they were.
This isn&rsquo;t all the data, either.
As any given version of Magic ships, internally, the company is testing the next two versions.
This gives them a great way of testing the accuracy of their internal testing: they have a lot of external usage data to compare to the predictions that internal testing made when they were developing a given version.
If you were developing a web app, this is the kind of performance and usage data you&rsquo;d really want: a huge corpus of data about what people wanted, what they tried doing in order to get it, and whether or not they got it.</p>

<p>The data-gathering that Magic&rsquo;s creators do synergizes with their release schedule: they release a new version four times a year without fail.
Their business model requires this - it&rsquo;s a model that should sound familiar.
They have an entertainment product that doesn&rsquo;t depreciate in value when it gets into consumers' hands, that people form emotional attachments to, and that can be easily transferred from one consumer to another.
Wizards of the Coast has demonstrated a lesson that the RIAA, MPAA, and publishing houses could learn from.
Instead of evilly and stupidly punishing their consumers for liking their product, they are <em>constantly adding value</em>.
They have gathered into their company the best damn card-game designers around: because of the economics of collectible card games, in the long run a competent CCG designer is overwhelmingly likely to be either employed by Wizards of the Coast or not employed as a CCG designer at all.
They have hired smart, they realize the limitations of their core product, and they are constantly innovating.
They sell accessories of all kinds.
They sell ancillary goods of all kinds.
They translate their product into other media with abandon, seeing what works and what doesn&rsquo;t.
They do not, it is important to note, sue their customers.
Magic isn&rsquo;t a perfect parallel to music, movies, or books, but I believe it demonstrates that it&rsquo;s possible to make money without also making your customers hate you.
If your customers hate you, they will flee as soon as an appealing alternative presents itself - a phenomenon we&rsquo;ve seen numerous times in the last decade and change.
By behaving evilly, the previous generations of media companies are ensuring that newer media companies will out-compete them.
Wizards, instead, is choosing to actually remain competitive.</p>

<p>Of course, you have an elevated risk of being distanced from your customers and alienated from them if you never talk to them.
Wizards has avoided that very deftly.
They <a href="http://www.wizards.com/Magic/Magazine/Default.aspx">publish lots of material for their community</a>, and the designers of the game solicit feedback directly.
If you write to Mark Rosewater, the man who currently has more power over the direction of Magic than any other human, you will get a reply.
If you go to a major Magic tournament, you will find delegates from Wizards' development team.
Sometimes they will be observing, but quite often they&rsquo;ll be &ldquo;gunslinging,&rdquo; playing the game against anyone who wants to take them on.
Magic&rsquo;s creators <a href="http://en.wikipedia.org/wiki/Eating_one%27s_own_dog_food">eat their own dogfood</a> and are highly exposed to the public.
They are not losing touch with their customers or regarding them as just numbers.
They are exposed, directly, to issues with their product - and they respond to those issues.</p>

<p>Wizards of the Coast gathers enormous amounts of data about their users' experience with their product, they are constantly adding value to their product, and they don&rsquo;t hide from their users.
When you look at software companies that are doing well, and especially at the ones that have become universally recognized names, I believe that you&rsquo;ll find them doing the same things.
These strategies work everywhere: there&rsquo;s no excuse for screwing them up.</p>
]]></content>
  </entry>
  
</feed>
