<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2017-10-30T21:26:10-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First Date With Ruby]]></title>
    <link href="http://stronglyemergent.com//blog/2013/first-date-with-ruby/"/>
    <updated>2013-06-15T08:57:00-07:00</updated>
    <id>http://stronglyemergent.com//blog/2013/first-date-with-ruby</id>
    <content type="html"><![CDATA[<p>Last night I took a notion into my head and wound up spending a solid few hours with Ruby.
I&rsquo;m happy with how that went! There&rsquo;s some first-time-with-a-new-language friction, but nothing out of the ordinary.
Here&rsquo;s what I came up with, and afterwards, why I chose that and what I think it shows that I accomplished that.</p>

<p><noscript><pre>require &#39;cgi&#39;
require &#39;json&#39;
require &#39;net/http&#39;
require &#39;uri&#39;

module Jekyll
  class MusicLink &lt; Liquid::Tag

    def initialize(tag_name, contents, tokens)
      super
      @contents = contents
    end

    def render(context)
      @affiliateCode = &#39;secret&#39; # Fill in yours!
      page = context.environments.first[&#39;page&#39;]
      if page[&#39;music-artist&#39;] &amp;&amp; page[&#39;music-track&#39;]
        music_url, music_string = getMusic(page[&#39;music-artist&#39;], page[&#39;music-track&#39;])
        return %(&lt;span class=&#39;music-box&#39;&gt;Music: &lt;a class=&#39;music-link&#39; href=&quot;#{music_url}&quot;&gt;#{music_string}&lt;/a&gt;&lt;/span&gt;)
      else
        return %()
      end
    end

    def makeItunesTarget(artist, track)
      iTunesURL = URI(&quot;https://itunes.apple.com/search&quot;)
      iTunesParams = {
        :country =&gt; &quot;us&quot;, :media =&gt; &quot;music&quot;,
        :limit =&gt; &quot;5&quot;, :entity =&gt; &quot;musicTrack&quot;,
        :term =&gt; artist + &quot; &quot; + track,
      }
      iTunesURL.query = URI.encode_www_form(iTunesParams)
      return iTunesURL
    end

    def getFromItunes(iTunesURL)
      http = Net::HTTP.new(iTunesURL.host, iTunesURL.port)
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_PEER

      request = Net::HTTP::Get.new(iTunesURL.request_uri)
      response = http.request(request)
      if response.code == &quot;200&quot;
        jsonResponse = JSON.load(response.body)
        if jsonResponse[&#39;resultCount&#39;] == 0
          jsonResponse = false
        end
      else
        jsonResponse = false
      end
      return jsonResponse
    end

    def makeAnchorFromItunesData(iTunesJSON)
      unless iTunesJSON
        return iTunesJSON, iTunesJSON
      end

      primaryResult = iTunesJSON[&#39;results&#39;].first
      if @affiliateCode
        urlRegex = /(https:\/\/itunes\.apple\.com\/[^?]+\?[^&amp;]+).+/
        urlReplacement = &#39;\1\2&amp;partnerId=30&amp;siteID=&#39; + @affiliateCode
        affiliatedTrackUrl= primaryResult[&#39;trackViewUrl&#39;].sub(urlRegex, urlReplacement)
        primaryResult[&#39;trackViewUrl&#39;] = affiliatedTrackUrl
      end

      anchorURL = primaryResult[&#39;trackViewUrl&#39;]
      anchorString = CGI.escapeHTML(&quot;%s - %s&quot; % [primaryResult[&#39;artistName&#39;], primaryResult[&#39;trackName&#39;]])
      return anchorURL, anchorString
    end

    def getMusic(artist_name, track_name)
      music_url, music_string = makeAnchorFromItunesData(getFromItunes(makeItunesTarget(artist_name, track_name)))
      return music_url, music_string
    end

  end
end

Liquid::Template.register_tag(&#39;music&#39;, Jekyll::MusicLink)
</pre></noscript><script src="https://gist.github.com/brighid/c3d19f2c6749fbec30ed.js?file=itms_music_link.rb"> </script></p>

<p>This creates a new Liquid tag, <code>{% music %}</code>, which can be inserted in page templates.
I added it to my <code>footer.html</code> after the byline, timestamp, and categories.
The tag checks whether the post&rsquo;s YAML front-matter has data for a musician and a track name.
If the post has that data, the plugin attempts to create a link to the iTunes Store for the given track.
With <code>makeItunesTarget()</code> it puts together a URL that is a query to the <a href="http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html">iTunes Store Search API</a>, with <code>getFromItunes()</code> it loads the query URL and hands off the response to the standard library&rsquo;s JSON parser, and with <code>makeAnchorFromItunesData()</code> it takes the first search result and generates text to use for an <code>&lt;a&gt;</code> tag and a URL to use for the tag&rsquo;s <code>href</code> attribute (if you have an affiliate code for the iTunes store, it&rsquo;ll be inserted).
Finally, there&rsquo;s a convenience function, <code>getMusic()</code>, that just composes the previous three.</p>

<p>Part of why this worked well is that it&rsquo;s another project with limited scope: I had a specific objective in mind, so I was able to keep moving gradually towards it.
However, that limited scope was a way of making progress towards the broad goal of &ldquo;learn Ruby&rdquo; and also took on the medium-scope goal of &ldquo;learn the iTunes Store Search API.&rdquo;
As a practical matter, learning to work with other people&rsquo;s APIs, whether they&rsquo;re libraries, services, or daemons, is an important skill for a working programmer; toy projects that include cultivating that skill are good uses of my time.
Learning new languages is also a career-long thing: for all the talk of Lisp being &ldquo;the hundred-year language,&rdquo; no-one now working as a programmer will be programming in just one language for the rest of their days.
There are shell scripts and libraries and wrappers: there is a fragmented world that despite the friction of fragmentation, would not actually be better-served by a language monoculture.
In addition, there are plenty of exciting things out there whose roots are in Ruby, so I was enthusiastic about picking up a smattering of Ruby.</p>

<p>I&rsquo;m definitely fond of Ruby so far.
Part of this is because I&rsquo;m getting to the point where I&rsquo;m seeing parallels with other languages and able to make good guesses about how a new language will behave.
I was able to guess from reading source &ldquo;oh okay, Ruby is one of the languages where the return value of a function, if not explicit, is the value of the last statement evaluated in its body,&rdquo; was pleasantly surprised that it has the same tuple-packing return-multiple-values feature as Python, and noticed &ldquo;oh hey neat, there&rsquo;s a Scheme-like <code>function!()</code> naming convention for functions that mutate their parameters.&rdquo;
So that&rsquo;s all good stuff.</p>

<p>Part of choosing Ruby, too, is that I&rsquo;m currently blogulating via Octopress, which is built on Ruby.
Most of why I chose it is that Wordpress is awful (on the axes I care about), but now that I&rsquo;ve chosen it, I want to have a grasp of how it works.
That means learning Ruby and tinkering&mdash;which I&rsquo;m looking forward to.</p>

<p>As a supplemental note, if this stuff sounds to you like a good attitude for a programmer to have, you should <a href="http://careers.stackoverflow.com/stronglyemergent">hire me</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Past Is A Foreign Country]]></title>
    <link href="http://stronglyemergent.com//blog/2013/the-past-is-a-foreign-country/"/>
    <updated>2013-03-02T16:00:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/the-past-is-a-foreign-country</id>
    <content type="html"><![CDATA[<p>Communicating with your past self can be a little alarming.
In the process of converting this blog to OctoPress
(because <a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP is a fractal of bad design</a> and WordPress has its own problems on top of being a huge PHP legacy system),
I learned not only that <code>Liquid Exception: Unknown tag 'endif' in page</code> is Liquid&rsquo;s way of saying &ldquo;you forgot to <em>start</em> that if-block, girl&rdquo;, I learned that my past self had very different priorities.</p>

<p>Not that this is <a href="news:">news:</a> as I&rsquo;ve gotten older, I&rsquo;ve gotten better at forgiving my past self for her fuckups.
It&rsquo;s still hard to forgive her eating habits, but bodies are complicated.
I was surprised, though, to learn that she was conflicted about whether to be a developer or a sysadmin.
Seriously?
It&rsquo;s not a binary: pretty much the whole subfield of devops is people who&rsquo;re making interesting choices about &ldquo;what if I pick things from both skillsets?&rdquo;
While I now think of myself as an engineer in general, not a sysadin or a developer, I am very happy that I am picking up bits and pieces of CS theory and that I can still read Apache config files, whip up basic Perl one-liners, and be on speaking terms with <code>vim</code>.</p>

<p>I admire the dedicated systems team at my work, but their job is not the job I want to do.
I want to <em>build things.</em>
That&rsquo;s gotten more and more important to me over time &mdash; the thrill of green-field development, of Something from Nothing, is one I want, over and over.
Lucky me: I am getting better and better at producing that experience for myself and making useful things along the way.</p>
]]></content>
  </entry>
  
</feed>
