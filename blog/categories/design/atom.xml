<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | Strongly Emergent]]></title>
  <link href="http://stronglyemergent.com//blog/categories/design/atom.xml" rel="self"/>
  <link href="http://stronglyemergent.com//"/>
  <updated>2016-07-20T19:23:06-07:00</updated>
  <id>http://stronglyemergent.com//</id>
  <author>
    <name><![CDATA[Strongly Emergent Systems]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Negative 100 Points]]></title>
    <link href="http://stronglyemergent.com//blog/2013/negative-100-points/"/>
    <updated>2013-06-28T20:07:00-07:00</updated>
    <id>http://stronglyemergent.com//blog/2013/negative-100-points</id>
    <content type="html"><![CDATA[<p>A <a href="http://blogs.msdn.com/b/ericgu/archive/2004/01/12/57985.aspx">short post by Eric Gunnerson</a> about designing C#, nearly a decade old now, has stuck with me for a long time.</p>

<blockquote><p>[the question] implies that we started with an existing language (C++ and Java are the popular choices here),
and then started removing features until we got to a point where we liked.
That&rsquo;s not how the language got designed.
One of the big reasons we didn&rsquo;t do this is that it&rsquo;s really hard to remove complexity when you take a subtractive approach,
as removing a feature in one area may not allow you to revisit low-level design decisions,
nor will it allow you to remove complexity elsewhere, in places where it support the now-removed feature.
We decided on the additive approach instead, and worked hard to keep the complexity down.
One way to do that is through the concept of &ldquo;minus 100 points.&rdquo;
Every feature starts out in the hole by 100 points,
which means that it has to have a significant net positive effect on the overall package for it to make it into the language.
Some features are okay features for a language to have, they just aren&rsquo;t quite good enough to make it into the language.</p></blockquote>

<p>If this sounds familiar, it should:
this is another lens on the design philosophy, popularized in the developer community by Apple, that good design requires saying &ldquo;no.&rdquo;
Saying &ldquo;no&rdquo; a <em>lot.</em>
I applaud Apple for applying this philosophy so rigorously&mdash;
but it&rsquo;s important to remember that they&rsquo;re <a href="http://technet.microsoft.com/en-us/magazine/dn167709.aspx">not the only people who use it</a>, and their way is not the only way.
What you say &ldquo;no&rdquo; to, defines you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter's Bickering Design]]></title>
    <link href="http://stronglyemergent.com//blog/2013/twitters-bickering-design/"/>
    <updated>2013-03-06T12:17:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/twitters-bickering-design</id>
    <content type="html"><![CDATA[<p>Today I was reminded of Mike Monteiro&rsquo;s <a href="http://muledesign.com/2011/07/density-and-difference/">note on Twitter vs. Google+ stream design</a> via MG Siegler&rsquo;s <a href="http://parislemon.com/post/7296339468/mike-monteiro-on-the-stream-design-of-google-vs">response</a>.
They gave me words for something that bothers me about Twitter&rsquo;s interaction design&mdash;
or rather, a feature of Twitter that I think leads people to make dumb choices.
<strong>Statements all look the same.</strong>
My <a href="http://i.imgur.com/qXiKbp4.gif">link to an adorable kitty</a> has the same visual weight as my serious summary of a political position, my off-the-cuff oversimplification of something I earnestly believe, or my cranky nitpicking reply to something you said.</p>

<p>Now, this is not to say that users should be able to control that visual weight.
Part of why MySpace sucked is that people could present their stuff any old way, which led to a <em>de facto</em> shouting contest.
Similarly, the &ldquo;urgent&rdquo; flag in email is useless because very few people have the same rubric about when to apply it and it&rsquo;s trivial for a few antisocial idiots to make the signal impossible to rely on.</p>

<p>However, we also&mdash;everyone is subject to this&mdash;tend to read everything on Twitter in the same register, because it&rsquo;s visually alike.
Normally &ldquo;oh, you can&rsquo;t read tone on the Internet&rdquo; is a canard.
You can read tone just fine when someone who can actually write tone is trying to convey is, and conveying it is a learnable skill.
Twitter, though, has a combination of constraints (length and visual weight) that makes it very easy for readers to read
&ldquo;I disagree with this portion of your argument and here&rsquo;s a link about why&rdquo; as
&ldquo;you are so wrong, you&rsquo;re an awful person and also you smell funny.&rdquo;</p>

<p>I try to use this to keep myself from getting into arguments on Twitter.
It is a great medium for some things.
Longform conversations &mdash; nope!
I&rsquo;m jazzed about my Branch invite, I hope that that or Medium builds something interesting on top of Twitter
(assuming that Twitter consents to let someone build; lately they seem to be more interested in killing off all the good things about the service).</p>

<p>Postscript: the image in Monteiro&rsquo;s post is a dead link, but I grabbed it from archive.org and <a href="http://i.imgur.com/Sf0BkYH.jpg">here it is on imgur</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Program Or Paradigm?]]></title>
    <link href="http://stronglyemergent.com//blog/2013/program-or-paradigm/"/>
    <updated>2013-03-03T17:08:00-08:00</updated>
    <id>http://stronglyemergent.com//blog/2013/program-or-paradigm</id>
    <content type="html"><![CDATA[<p>I&rsquo;m an emacs girl:
emacs is the environment that taught me to love Lisp, emacs is most of the way to becoming an extension of my desires, emacs is in Neal Stephenson&rsquo;s memorable phrase
&ldquo;the thermonuclear text editor.&rdquo;
Like everyone else who&rsquo;s smitten with it, I have a theory about What Makes Emacs Different: emacs is a paradigm, not a program.</p>

<p>Let&rsquo;s talk about interfaces.
In 1976, using computers was harder&mdash;
not because people were dumber or worse at design, but because there were fewer giants on whose shoulders to stand and because the computers themselves were incapable of working as hard.
That meant, in turn, that the 1976 OS couldn&rsquo;t be as generous to user-space programs as the 2013 OS can be.
In 2013, the OS can step up and be the primary answerer of the question, &ldquo;how do I use this computer?&rdquo;
In 1976, the OS is too busy running the computer to do more than nod in the Bourne shell&rsquo;s direction.
This has considerable downsides for programs: they have to do everything themselves.
But they have one important freedom:
they get to answer the user&rsquo;s fundamental &ldquo;how do I use this computer?&rdquo; question <em>any way they want.</em></p>

<p>In 2013, the OS has an answer to this question, more or less opinionated according to the OS.
Because it is easier to let the OS answer the question, that&rsquo;s what most programs do:
they use the OS&rsquo;s chrome, file management, and other facilities.
There are many good things about this: there are many more useful programs in the world than when programs had to do everything themselves.
But it is a tradeoff:
a program that comes from the world where the OS provides easy answers is almost completely unable to provide its own answers.</p>

<p>This is where we come back to emacs:
the reason that emacs can look so strange in 2013 is that it has its own opinions, strong ones, about how to relate to files, displays, and text.
Emacs is a <em>paradigm for how to interact with text.</em>
It has stronger opinions than modern programs because it comes from a time when programs had the ability to answer those questions themselves.
A program from the strong-OS era&mdash;
for example, Eclipse&mdash;
or which adapted itself to strong OSes&mdash;
for example, Microsoft Word&mdash;
is restricted by being situated within the boundaries established the by the OS' answer to &ldquo;how do I use this computer?&rdquo;
Eclipse and Word are <em>programs</em> that edit text.
Emacs is a <em>language</em> for editing text.</p>

<p>One of the clearest ways to see this is to compare emacs to something that&rsquo;s more similar to it than Eclipse or Word: <code>vi</code>.
With its movement-operation-modifier syntax for commands, vi has its own answer to the question
&ldquo;how do I use this computer?&rdquo;
that&rsquo;s every bit as thorny for us 2013 folks as emacs' answer&mdash;
and that&rsquo;s <a href="http://stackoverflow.com/a/1220118/">just as powerful when you grok it deeply</a>.
In the context of their 1976 roots, you can see that the creators of both vi and emacs embarked on the tremendously ambitious project of giving users a language in which to edit text.
The existence and popularity of software that&rsquo;s pushing 40 years old and still being actively used and extended, is strong evidence that both did well
(though we should check our <a href="http://en.wikipedia.org/wiki/Survivorship_bias">survivorship bias</a> and note that most programs from that era did not survive in the same way).</p>

<p>If you are someone who spends a lot of time with text, especially if you&rsquo;re a hacker, you should be using emacs or vi.
There are many <a href="http://notepad-plus-plus.org/">okay</a> and <a href="http://www.sublimetext.com/">good</a> <a href="http://www.barebones.com/products/bbedit/">tools</a> for <a href="http://www.chocolatapp.com/">editing</a> <a href="http://macromates.com/">text</a> and <a href="http://panic.com/coda/">producing</a> <a href="http://www.jetbrains.com/idea/">code</a>, especially for <a href="https://developer.apple.com/xcode/">specific</a> <a href="http://www.microsoft.com/visualstudio/eng">domains</a>, but emacs and vi are the only <em>great</em> general-purpose editors.
A program that wants to take advantage of the benefits that a modern OS offers could possibly be great&mdash;
but it would have to be a <a href="http://www.lighttable.com/">different route</a> to greatness than emacs and vi took.</p>

<p>I spend a tremendous amount of time with prose and code, and emacs is a great match for me.
For a large class of problems, my response to encountering them starts with <code>M-:</code>.
I routinely try to use emacs' keyboard shortcuts in other contexts (e.g.
switching tabs in Firefox with <code>C-x o</code>).
I was actively excited when I found out that emacs had integrated a unit testing framework.
When I tell you that you should use emacs, you should know that that&rsquo;s the kind of relationship I have with emacs.
I think you should use emacs anyhow, because I think that when a task is important to you, you should use a great tool for it, not just the first good one you find.
&ldquo;How will I use this computer to produce prose and code for the next 20 years?&rdquo;
is a very, <em>very</em> important question to me.</p>

<p>The answer is emacs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Locating Design in Latitude, Find My Friends, and Yelp]]></title>
    <link href="http://stronglyemergent.com//blog/2011/locating-design-in-latitude-find-my-friends-and-yelp/"/>
    <updated>2011-10-25T14:48:46-07:00</updated>
    <id>http://stronglyemergent.com//blog/2011/locating-design-in-latitude-find-my-friends-and-yelp</id>
    <content type="html"><![CDATA[<p>The conventional wisdom in computing is that the difference between Apple and its competitors, is design.
This isn&rsquo;t wrong, but it&rsquo;s insufficiently specific: when people say that Apple focuses on &ldquo;design,&rdquo; they often mean that the visual, graphical, surface aspect of Apple products, is different.
It is - but that is not a difference of &ldquo;design.&rdquo;
Design is about fitting the designed artifact into human lives, and there are some crucially important non-visual aspects to design in this sense.</p>

<p>I&rsquo;m going to talk about one specific group of non-visual design choices here, comparing Apple&rsquo;s &ldquo;Find My Friends&rdquo; service to two similar services - Google&rsquo;s &ldquo;Latitude&rdquo; and Yelp&rsquo;s check-ins feature (used here as a stand-in for check-in services in general - e.g. Foursquare, Facebook Places, Gowalla).
All three share a core functionality: they advertise the user&rsquo;s location and allow them to discover the location of others.
They differ in how they attempt to fit into users' lives, and in how they execute their attempts.
I want to illustrate how, in the areas where it is attempting to do the same thing as the other services, Apple&rsquo;s service is different, and the difference is design.</p>

<p>As phones have become mobile computing devices, they&rsquo;ve converged with desktop computing in some ways, and diverged in other ways.
One of the convergences is the social experience: email, the original social experience in computing, was one of the first things that made smartphones smart.
One of the big divergences is location: it may be advantageous to know where a specific desktop computer is, but that location is unlikely to change - it&rsquo;s a single piece of information.
With mobile computing, location is a stream of information instead of a single piece, and adding that stream to other streams of information, then distilling, is where many mobile companies have added value.
One of the obvious results of trying to put the social and local aspects of mobile together is check-in services: a way to say &ldquo;here I am!&rdquo; to your social circle.
Google participated in an early wave of such services with Google Latitude&rsquo;s launch in early 2009, Yelp launched its check-ins feature in early 2010, and Apple&rsquo;s offering appeared in late 2011.
All of these services allow you to broadcast your location, to restrict who can hear that broadcast, and to view the broadcasts of others.
Those functions are the core of any location-based social service: they are the same across all three services, even though these services all have different goals.</p>

<ul>
<li><p>Apple, in characteristic fashion, makes the service&rsquo;s goal very, very obvious.
Its name is &ldquo;Find My Friends.&rdquo;
There isn&rsquo;t that much to say about the service - there&rsquo;s a map, other users of the service show up on the map, and you can find them.
That&rsquo;s it.</p></li>
<li><p>Yelp&rsquo;s service is slightly more complicated, but still straightforward.
Yelp is all about restaurants, venues, and other businesses, so it lets you broadcast that you are at a specific business.
It doesn&rsquo;t show you a map, but instead a list of places where others have checked in - which is not very much help in finding them if you&rsquo;re at Candlestick Park, for example.
It also lets business interact with and reward patrons who visit frequently, and allows users to send short messages to Yelp, Facebook, or Twitter, about what they&rsquo;re doing at the place where they&rsquo;ve checked in.</p></li>
<li><p>Google&rsquo;s service is open-ended.
There&rsquo;s a map, other users of the service show up on the map, and you can find them.
Latitude shares a lot of genetic material with Find My Friends - they&rsquo;re both implementing the most obvious thing you can do with social-plus-local.
Google&rsquo;s service is goal-agnostic: for quite a while, the map was all it was, but recently, they&rsquo;ve added an API and a feature that tells users how much time they&rsquo;ve spent at home, at work, or out-and-about.</p></li>
</ul>


<p>These summaries show one significant design difference between the services: Apple and Yelp have clearly defined goals for how their services should fit into human lives.
Apple helps you find your friends.
Yelp helps you evaluate venues.
Google&rsquo;s service can do what Apple&rsquo;s does, but also shows you a history of where you&rsquo;ve been, has check-ins like Yelp&rsquo;s, and lets you broadcast your location through other Google properties (for example, you can have your Latitude location displayed as part of the Google Chat interface).
Its public API also lets other services build on its data and provide further services.
Now, &ldquo;you can&rsquo;t summarize what Google Latitude does for users in a concise sentence&rdquo; is not exactly a major flaw.
It is, however, sloppy design by the criteria we&rsquo;re using right now.
Not having a clear answer for &ldquo;how does this fit into users' lives?&rdquo; shows that you have a design problem.
As long as that question goes without an answer, you will never have a well-designed product.
Answering that question requires focus.</p>

<p>I&rsquo;m going to diverge for a moment: we humans have a complicated relationship with choice and focus.
Of course we want both: it is good to keep your options open, and it&rsquo;s good to focus.
But they&rsquo;re mutually exclusive goods - and when the chips are down, we have a very strong desire to keep our options open.
The best example of this is a study that Dan Ariely <a href="http://duke.edu/~dandan/Papers/doors.pdf">performed on MIT students</a> and wrote about in <a href="http://www.amazon.com/gp/product/0061353248/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=stronemerg05-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0061353248">Predictably Irrational</a>: his study offered participants three doors on a computer screen, each of which offered varying rewards when clicked on.
Participants were asked to maximize rewards with a limited number of clicks.
They were easily able to do this in the first iteration - but in the second iteration, any door that went unclicked for a certain amount of time, closed permanently.
At that point, participants' efficiency fell dramatically - they went to great lengths to keep all of the doors available for opening.
Participants &ldquo;couldn&rsquo;t tolerate the idea of the loss,&rdquo; Ariely writes, claiming that we are all averse to foreclosing on possibilities in the same way - unless we consciously fight that bias.
Good design is about <a href="http://www.oreillynet.com/onlamp/blog/2004/08/say_no_by_default.html">fighting that bias</a>:</p>

<blockquote><p>In June of 2003, Steve Jobs gave a small private presentation about the iTunes Music Store to some independent record label people.
&hellip;
people kept raising their hand saying, &ldquo;Does it do (x)?&rdquo;, &ldquo;Do you plan to add (y)?&rdquo;.
Finally Jobs said, &ldquo;Wait wait - put your hands down.
Listen: I know you have a thousand ideas for all the cool features iTunes <em>could</em> have.
So do we.
But we don&rsquo;t want a thousand features.
That would be ugly.
Innovation is not about saying yes to everything.
It&rsquo;s about saying NO to all but the most crucial features.&rdquo;</p></blockquote>

<p>Apple and Yelp&rsquo;s services have decided what they&rsquo;re going to say no to.
As far as I can tell, Google&rsquo;s service hasn&rsquo;t.
This is consistent with the general way that these three companies work with focus and choice.
Yelp has it easy: it defines itself as being a company that is about evaluating venues.
That can be a big job - but that definition also excludes many things.
Yelp will never be a peer-to-peer file-sharing service, create an operating system, or manufacture a tablet computer.
Apple, by contrast, is big enough and ambitious enough that it might do anything - and it is very, very selective about what it does do.
The credo of &ldquo;say no to all but the most crucial features&rdquo; is one that&rsquo;s been reflected in every Apple product for the last decade.
At this point, making a product that didn&rsquo;t leave half of the technical press corps whiny and dyspeptic about missing features would be an astonishing thing for Apple to do.
They say no to features all the time.</p>

<p>Google is having trouble learning to say no.
Consider Google Wave - if Google Latitude has a half-hearted, lame answer to the question, &ldquo;how does this fit into users' lives,&rdquo; Google Wave brazenly defies the question and jeers at its premises.
But Google did eventually say no to Wave - and perhaps its features will in time show up in contexts where they can give a satisfying answer to the question.
Google&rsquo;s best products - for example, Search and Gmail - answer the question decisively.
For that matter, Google&rsquo;s corporate goal of organizing and making useful the world&rsquo;s information, also is a good step towards answering that question of design.</p>

<p>Now, another piece of conventional wisdom in computing is that Google is bad at design.
I think that that is true, but that it&rsquo;s true in ways that people usually don&rsquo;t consider.
Just as Apple products' good design isn&rsquo;t just surface appearances, Google&rsquo;s bad design decisions don&rsquo;t happen in a vacuum.
It&rsquo;s ridiculous to suggest that Google commits bad design because they&rsquo;re dumb or malicious.
Nothing could be further from the truth about the Google employees of my acquaintance, and the company itself is only as dumb and malicious as Apple is - which is to say, many orders of magnitude less so than the average American corporation.
I believe that Google&rsquo;s design problems stem from business strategies in which design is irrelevant, from the cognitive bias of not wanting to foreclose possibilities, and, crucially, from having chosen extraordinarily difficult design challenges.</p>

<ul>
<li><p>Google&rsquo;s business strategy centers around <a href="http://itsallabouttech.com/2011/03/business-strategy-of-google-the-google-moats/">widening its moat</a>.
This is a large part of why Google launched its social networking service, Google Plus - to protect its core business from Facebook.
This is part of why Google launched its music product - to protect against Amazon and Apple trying to expand into its territory.
This is part of why Google has Android - Google disrupts other businesses by being <a href="http://abovethecrowd.com/2009/10/29/google-redefines-disruption-the-%E2%80%9Cless-than-free%E2%80%9D-business-model/">cheaper than free</a>.
What all of those have in common is that for them to succeed on a strategic level for Google, doesn&rsquo;t require that they be dominant or highly profitable.
If they did need to be dominant or highly profitable, there would be an evolutionary pressure to design them well - but there isn&rsquo;t.
When good design doesn&rsquo;t help your business towards its strategic goals, good design gets thrown overboard.
So it goes.</p></li>
<li><p>Google&rsquo;s corporate culture is rooted in engineering.
This has many positive effects, because Google is also obsessed with hiring enormously smart engineers.
They&rsquo;re very good at that.
That means, however, that they inherit some of the cultural biases of computer engineering in general.
One of these is the cognitive bias that the users must be similar to the programmers of software and devices.
That causes problems for design, because the way that the &ldquo;unwilling to foreclose options&rdquo; bias operates in engineers, is that they don&rsquo;t want to give up configurability - don&rsquo;t want to give up control.
As a result, if you&rsquo;re the sort of person who is willing to be the sysadmin of your phone, Android is great for you.
The cost of that configurability, though, is paid by giving up focus.</p></li>
<li><p>Finally, Google has taken on some enormously, enormously difficult design challenges.
I think that this is a bigger factor than is usually acknowledged.
With a shallower pool of design talent than Apple, and less time to nurture it, Google has taken on harder design problems.
To see how hard they are, just contemplate that &ldquo;organizing the world&rsquo;s information&rdquo; goal - and then realize that <em>Google takes that seriously</em>.
Apple tries many things, but few ever leave the black box in Cupertino.
The number of things that Google has tried is enormous, and the amount of money that they have put towards them, even more enormous.
Google runs search, Gmail, YouTube, Blogger, Analytics, Adwords, Adsense, Calendar, Reader, Docs, Drive, Android, Chrome, ChromeOS, Voice, Translate, Earth, Groups, Latitude - and you&rsquo;ll need to pause for breath again before you run out of recognizable Google properties.
Further, they run many of them as public goods - the SPDY protocol, the public DNS servers, hiring on figures from the open-source world and essentially patronizing them to continue their work (e.g. Guido van Rossum).
So with fewer design resources than Apple, they&rsquo;ve chosen tougher problems.
Once you look at it that way, their design woes are entirely predictable.</p></li>
</ul>


<p>As a result of these factors, Google Latitude is a typical Google service - while it does some interesting things, and it&rsquo;s improving over time, it&rsquo;s unfocused and it&rsquo;s hard to gather its features into a coherent value proposition.
If you&rsquo;re a developer and you&rsquo;re interested in location services but not in Objective-C, you could do worse than to familiarize yourself with Google Latitude.
Google has refrained from foreclosing on your options - you can reach out to Latitude from whatever you&rsquo;re programming and make friends with it.
Apple provides a location services API, but that&rsquo;s not a Find My Friends API.
Find My Friends is private property.</p>

<p>Private property is a good thing in a location service, though - a service that lets you broadcast your location is a service that can be used to follow you and to gather information about you.
The privacy controls in Apple, Google, and Yelp&rsquo;s services are very revealing: they show the differences in design clearly.
Google Latitude maintains a list of people who are allowed to see your location.
You can add and remote people from the list and tell Google whether they&rsquo;re allowed to see your precise location or a less specific version, and you can turn on and off broadcasting your location at all.
Yelp allows you to decide who will see your broadcast every time you use the check-in feature - you can tell Twitter, Facebook, your Yelp friends, or nobody in particular (although in the last case, you&rsquo;ll still be part of the generally visible stream of checkins on Yelp, but you&rsquo;ll be lost in a crowd).</p>

<p>Apple&rsquo;s Find My Friends adds one important privacy feature that Latitude doesn&rsquo;t have, and says no to one feature that Latitude does have.
When you decide to share your location with someone on Find My Friends, you can also add &ldquo;for the next few hours&rdquo; - you can tell the service that your sharing is temporary.
You can also manually turn off sharing with that person later, as with Latitude - but if you have already made a decision about sharing your location, Apple&rsquo;s design lets you do all of your decisions at once, instead of requiring that you come back later and undo what you have done.
I think that&rsquo;s an important symptom of the difference in design.
Apple&rsquo;s design allows you to centralize decisions in time.
Apple&rsquo;s design also avoids burdening you later: you don&rsquo;t need to go back to the service later and tell it to stop caring, after you already have.
It fits into your life by not requiring that you take extra steps to stop doing something - you can just stop.
Google Latitude needs more work than that to fit into your life - and surely people have wanted a feature like this since Latitude&rsquo;s 2009 launch.</p>

<p>On the flip side, Google Latitude lets you manually set your location in addition to simply switching automatically-detected location on and off.
I call this a &ldquo;promised location.&rdquo; Find My Friends does not let you do this, and I think that&rsquo;s interesting.
Why not? For one thing, I&rsquo;d guess, a promised location doesn&rsquo;t pull its own weight.
You don&rsquo;t need an app to make a promise about location to other people - if you have enough information about someone to share location on Find My Friends, you have enough information to use something else to make a promise about your location.
So it&rsquo;s redundant, and redundancy is a thing that good designs usually eliminate.
More subtly, you might not keep that promise about your location - so you could say that Latitude permits you to lie about your location.
If you were to look up my location on Google Latitude, you&rsquo;d see me forever trapped in one Whole Foods market, never leaving it.
You could also say that Google Latitude is less likely to <a href="http://gawker.com/5850321/did-iphones-find-my-friends-just-break-up-its-first-marriage">break up a relationship</a>.
Yelp, for the record, <a href="http://blog.sfgate.com/techchron/2010/11/24/how-yelp-plans-to-curb-check-in-fraud/">uses location checking and other heuristics to check on your promised location</a>.</p>

<p>So Apple&rsquo;s design is missing that feature.
Is that good or bad?
It is <em>opinionated</em> - and that&rsquo;s what good design fundamentally is.
Design is about making decisions, and Apple&rsquo;s design here definitely expresses opinions about how it fits into your life, and those opinions are consistently expressed, top-to-bottom.
Of course people differ - part of the challenge of design as a field of endeavor is that people differ so widely in their needs and desires, and nothing will satisfy all of us.
So of course Apple&rsquo;s products don&rsquo;t satisfy everyone.
But what makes their product well-defined is that they have renounced trying to make everyone happy.
That difference between Apple and the rest of the industry is visible in every Apple product: Apple has an opinion about how their products fit into humans' lives, and that opinion is focused, saying no to possibilities that are appealing, but in the end sub-optimal.
That is what it means that the difference between Apple and everyone else, is design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It Only Looks Easy]]></title>
    <link href="http://stronglyemergent.com//blog/2010/it-only-looks-easy/"/>
    <updated>2010-12-07T23:01:34-08:00</updated>
    <id>http://stronglyemergent.com//blog/2010/it-only-looks-easy</id>
    <content type="html"><![CDATA[<p>The Internal Revenue service has, as government agencies go, a pretty simple directive.
Here is the tax code, which we can consider to be a big lump of business logic.
Here are people&rsquo;s statements of how much money they made and how much money they owe.
Using those two, make sure that people stated both halves accurately.</p>

<p>It won&rsquo;t surprise you to learn that that isn&rsquo;t actually a simple task.</p>

<p>I do expect it to surprise you that it&rsquo;s even more complicated than that.
Here&rsquo;s something that betrays the complication, one little directive from <a href="http://www.irs.gov/publications/p17/ch12.html">IRS Publication 17, Chapter 12</a>:
&ldquo;If you receive a bribe, include it in your income.&rdquo;</p>

<p>Yes, the IRS has to tax you on illegal income.
No, the IRS isn&rsquo;t allowed to fully care that it&rsquo;s illegal income - otherwise the whole agency is a walking 5th Amendment violation, something that <a href="http://www.irs.gov/businesses/small/article/0,,id=106500,00.html">people frequently get on their case about</a>.
I am not the world&rsquo;s biggest fan of the IRS - but I think that their position is a great illustration of how complicated systems work.
Systems get complicated easily, and the ongoing task of &ldquo;civilization&rdquo; is to make complex systems manageable.
This is difficult, and <a href="http://www.shirky.com/weblog/2010/04/the-collapse-of-complex-business-models/">the difficulty scales up unpleasantly late in the game</a>.
It&rsquo;s still worth thinking about.</p>

<p>My favorite exposé of this, especially in light of the California elections, is Steve Yegge&rsquo;s <a href="http://steve-yegge.blogspot.com/2009/04/have-you-ever-legalized-marijuana.html">Have You Ever Legalized Marijuana?</a>
He barely scratches the surface, but he very effectively demonstrates that legalizing marijuana, no matter how much you like the idea, is a huge and complicated thing.</p>

<p>Taming complex systems is never easy - but that&rsquo;s pretty much how we get advances in civilization.
So we need to be good at it.
I&rsquo;m always happy to see evidence of this happening, especially when it&rsquo;s in entertaining form.
Pac-Man comes to mind.
Pac-Man is a great example of a complex system in this context - and a recent blogulator has <a href="http://gameinternals.com/post/2072558330/understanding-pac-man-ghost-behavior">given us all a fascinating look at the internals</a>.
This is the sort of thing I love reading, because it shows how aspects of ordinary life that we don&rsquo;t always look at directly, are full of complexity and reward investigation.</p>

<p>Unfortunately, that complexity also means endless debate.
Even when there is an authoritative answer to a complex question, someone whose salary depends on that answer not being understood, will probably be able to prevent people from understanding it.
The long version of this is in <a href="http://cscs.umich.edu/~crshalizi/weblog/523.html">Cosma Shalizi&rsquo;s authoritative takedown of <em>The Bell Curve</em> tomfoolery</a>, and the short version is in The Onion&rsquo;s <a href="http://www.theonion.com/articles/new-study-finds-blacks-more-likely,18552/">&ldquo;New Study Finds Blacks More Likely.&rdquo;</a></p>

<p>This is part of why simplicity and elegance are hard.
We are surrounded with complex systems, and synthesizing something simple and useful requires taming complexity - which is a tremendous challenge.
Fortunately for us hackers, that&rsquo;s usually where the interesting problems are.</p>
]]></content>
  </entry>
  
</feed>
